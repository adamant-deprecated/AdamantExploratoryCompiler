//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Exploratory.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Enum=11, New=12, Delete=13, Self=14, Uninitialized=15, Where=16, 
		Base=17, Var=18, Let=19, Get=20, Set=21, Sealed=22, Override=23, Partial=24, 
		Abstract=25, Params=26, Extern=27, Do=28, While=29, If=30, Else=31, For=32, 
		In=33, Foreach=34, Yield=35, Switch=36, Break=37, Continue=38, Return=39, 
		Try=40, Catch=41, Finally=42, Throw=43, Implicit=44, Explicit=45, Conversion=46, 
		Public=47, Private=48, Protected=49, Package=50, Safe=51, Unsafe=52, Own=53, 
		Mutable=54, Immutable=55, Async=56, Await=57, String=58, ByteType=59, 
		IntType=60, UIntType=61, FloatType=62, FixedType=63, DecimalType=64, SizeType=65, 
		BooleanLiteral=66, IntLiteral=67, NullLiteral=68, StringLiteral=69, Semicolon=70, 
		Colon=71, Dot=72, ColonColon=73, Tilde=74, Comma=75, Lambda=76, LeftBrace=77, 
		RightBrace=78, LeftAngle=79, RightAngle=80, LeftBracket=81, RightBracket=82, 
		LeftParen=83, RightParen=84, Asterisk=85, AtSign=86, AddressOf=87, Coalesce=88, 
		IsNull=89, Equal=90, NotEqual=91, LessThanOrEqual=92, GreaterThanOrEqual=93, 
		TypeList=94, Plus=95, Minus=96, Divide=97, Pipe=98, And=99, Xor=100, Or=101, 
		Not=102, BitAnd=103, BitOr=104, BitXor=105, BitNot=106, BitShiftLeft=107, 
		BitShiftRight=108, Assign=109, AddAssign=110, SubtractAssign=111, MultiplyAssign=112, 
		DivideAssign=113, AndAssign=114, XorAssign=115, OrAssign=116, Identifier=117, 
		EscapedIdentifier=118, Unknown=119;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_baseTypes = 6, 
		RULE_modifier = 7, RULE_typeParameters = 8, RULE_typeParameter = 9, RULE_typeArguments = 10, 
		RULE_simpleName = 11, RULE_name = 12, RULE_valueType = 13, RULE_referenceType = 14, 
		RULE_funcTypeParameterList = 15, RULE_funcTypeParameter = 16, RULE_constExpression = 17, 
		RULE_typeParameterConstraintClause = 18, RULE_typeParameterConstraint = 19, 
		RULE_member = 20, RULE_parameterList = 21, RULE_parameter = 22, RULE_parameterModifier = 23, 
		RULE_constructorInitializer = 24, RULE_argumentList = 25, RULE_methodBody = 26, 
		RULE_overloadableOperator = 27, RULE_statement = 28, RULE_localVariableDeclaration = 29, 
		RULE_expression = 30;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"attribute", "baseTypes", "modifier", "typeParameters", "typeParameter", 
		"typeArguments", "simpleName", "name", "valueType", "referenceType", "funcTypeParameterList", 
		"funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "localVariableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'self'", "'uninitialized'", 
		"'where'", "'base'", "'var'", "'let'", "'get'", "'set'", "'sealed'", "'override'", 
		"'partial'", "'abstract'", "'params'", "'extern'", "'do'", "'while'", 
		"'if'", "'else'", "'for'", "'in'", "'foreach'", "'yeild'", "'switch'", 
		"'break'", "'continue'", "'return'", "'try'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'public'", "'private'", 
		"'protected'", "'package'", "'safe'", "'unsafe'", "'own'", "'mut'", "'immut'", 
		"'async'", "'await'", "'string'", "'byte'", null, null, null, null, null, 
		"'size'", null, null, "'null'", null, "';'", "':'", "'.'", "'::'", "'~'", 
		"','", "'->'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", 
		"'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", 
		"'+'", "'-'", "'/'", "'|'", "'and'", "'xor'", "'or'", "'not'", "'bit_and'", 
		"'bit_or'", "'bit_xor'", "'bit_not'", "'bit_shift_left'", "'bit_shift_right'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'and='", "'xor='", "'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Enum", "New", "Delete", "Self", "Uninitialized", "Where", "Base", 
		"Var", "Let", "Get", "Set", "Sealed", "Override", "Partial", "Abstract", 
		"Params", "Extern", "Do", "While", "If", "Else", "For", "In", "Foreach", 
		"Yield", "Switch", "Break", "Continue", "Return", "Try", "Catch", "Finally", 
		"Throw", "Implicit", "Explicit", "Conversion", "Public", "Private", "Protected", 
		"Package", "Safe", "Unsafe", "Own", "Mutable", "Immutable", "Async", "Await", 
		"String", "ByteType", "IntType", "UIntType", "FloatType", "FixedType", 
		"DecimalType", "SizeType", "BooleanLiteral", "IntLiteral", "NullLiteral", 
		"StringLiteral", "Semicolon", "Colon", "Dot", "ColonColon", "Tilde", "Comma", 
		"Lambda", "LeftBrace", "RightBrace", "LeftAngle", "RightAngle", "LeftBracket", 
		"RightBracket", "LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", 
		"Coalesce", "IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "Pipe", "And", "Xor", "Or", "Not", 
		"BitAnd", "BitOr", "BitXor", "BitNot", "BitShiftLeft", "BitShiftRight", 
		"Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 62; usingDirective();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 68; declaration();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 74; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(Using);
			State = 77; namespaceName();
			State = 78; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 82;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 85; Match(Dot);
				State = 86; _localctx._identifier = identifier();
				_localctx._identifiers.Add(_localctx._identifier);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 195;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(Namespace);
				State = 93; namespaceName();
				State = 94; Match(LeftBrace);
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 95; usingDirective();
					}
					}
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 101; declaration();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 107; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 109; attribute();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 115; modifier();
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 121; Match(Class);
				State = 122; identifier();
				State = 124;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 123; typeParameters();
					}
				}

				State = 127;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 126; baseTypes();
					}
				}

				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 129; typeParameterConstraintClause();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 135; Match(LeftBrace);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 136; member();
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 142; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 144; attribute();
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 150; modifier();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 156;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 157; identifier();
				State = 160;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 158; Match(Colon);
					State = 159; referenceType();
					}
				}

				State = 164;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 162; Match(Assign);
					State = 163; expression(0);
					}
				}

				State = 166; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 168; attribute();
						}
						} 
					}
					State = 173;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 174; modifier();
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 180; identifier();
				State = 182;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 181; typeArguments();
					}
				}

				State = 184; parameterList();
				State = 185; Match(Lambda);
				State = 186; ((FunctionDeclarationContext)_localctx).returnType = referenceType();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 187; typeParameterConstraintClause();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 193; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(EscapedIdentifier);
			State = 200;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 198; Match(LeftParen);
				State = 199; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 202; Match(Colon);
			State = 204;
			_la = TokenStream.La(1);
			if (_la==Identifier || _la==EscapedIdentifier) {
				{
				State = 203; _localctx.baseType = name(0);
				}
			}

			State = 215;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 206; Match(Colon);
				State = 207; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 208; Match(Comma);
					State = 209; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken token;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			State = 231;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; _localctx.token = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; _localctx.token = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 222; _localctx.token = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 223; _localctx.token = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 224; _localctx.token = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 225; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 226; _localctx.token = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 227; _localctx.token = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 228; _localctx.token = Match(Override);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 13);
				{
				State = 229; _localctx.token = Match(Async);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 14);
				{
				State = 230; _localctx.token = Match(Extern);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(LeftAngle);
			State = 234; typeParameter();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 235; Match(Comma);
				State = 236; typeParameter();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 242; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public ValueTypeContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; identifier();
			State = 246;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 245; _localctx.isList = Match(TypeList);
				}
			}

			State = 250;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 248; Match(Colon);
				State = 249; _localctx.baseType = valueType(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ReferenceTypeContext[] referenceType() {
			return GetRuleContexts<ReferenceTypeContext>();
		}
		public ReferenceTypeContext referenceType(int i) {
			return GetRuleContext<ReferenceTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(LeftAngle);
			State = 253; referenceType();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 254; Match(Comma);
				State = 255; referenceType();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 261; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_simpleName);
		try {
			State = 267;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; identifier();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; identifier();
				State = 265; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleNameNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public SimpleNameNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleNameNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 270; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 272;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 273; Match(Dot);
					State = 274; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringTypeContext : ValueTypeContext {
		public IToken token;
		public StringTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeContext : ValueTypeContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveNumericTypeContext : ValueTypeContext {
		public IToken token;
		public ITerminalNode IntType() { return GetToken(AdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(AdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(AdamantParser.FloatType, 0); }
		public ITerminalNode FixedType() { return GetToken(AdamantParser.FixedType, 0); }
		public ITerminalNode DecimalType() { return GetToken(AdamantParser.DecimalType, 0); }
		public ITerminalNode SizeType() { return GetToken(AdamantParser.SizeType, 0); }
		public PrimitiveNumericTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : ValueTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public FunctionTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : ValueTypeContext {
		public ValueTypeContext _valueType;
		public IList<ValueTypeContext> _types = new List<ValueTypeContext>();
		public ValueTypeContext[] valueType() {
			return GetRuleContexts<ValueTypeContext>();
		}
		public ValueTypeContext valueType(int i) {
			return GetRuleContext<ValueTypeContext>(i);
		}
		public TupleTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MaybeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public PointerTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueTypeContext _localctx = new ValueTypeContext(Context, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 281; name(0);
				}
				break;
			case String:
				{
				_localctx = new StringTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 282; ((StringTypeContext)_localctx).token = Match(String);
				}
				break;
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case FixedType:
			case DecimalType:
			case SizeType:
				{
				_localctx = new PrimitiveNumericTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283;
				((PrimitiveNumericTypeContext)_localctx).token = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (ByteType - 59)) | (1L << (IntType - 59)) | (1L << (UIntType - 59)) | (1L << (FloatType - 59)) | (1L << (FixedType - 59)) | (1L << (DecimalType - 59)) | (1L << (SizeType - 59)))) != 0)) ) {
					((PrimitiveNumericTypeContext)_localctx).token = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 284; Match(LeftBracket);
					State = 285; ((TupleTypeContext)_localctx)._valueType = valueType(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 286; Match(Comma);
						State = 287; ((TupleTypeContext)_localctx)._valueType = valueType(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
						}
						}
						State = 292;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 293; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 295; Match(LeftBracket);
					State = 296; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 299; funcTypeParameterList();
				State = 300; Match(Lambda);
				State = 301; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 309;
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new MaybeTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 305;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 306; Match(IsNull);
						}
						break;
					case 2:
						{
						_localctx = new PointerTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 307;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 308; Match(Asterisk);
						}
						break;
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	 
		public ReferenceTypeContext() { }
		public virtual void CopyFrom(ReferenceTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OwnedImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedMutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedMutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_referenceType);
		try {
			State = 322;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new ImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; valueType(0);
				}
				break;
			case 2:
				_localctx = new MutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; Match(Mutable);
				State = 316; valueType(0);
				}
				break;
			case 3:
				_localctx = new OwnedImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 317; Match(Own);
				State = 318; valueType(0);
				}
				break;
			case 4:
				_localctx = new OwnedMutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 319; Match(Own);
				State = 320; Match(Mutable);
				State = 321; valueType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 337;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(LeftParen);
				State = 325; funcTypeParameter();
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 326; Match(Comma);
					State = 327; funcTypeParameter();
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 333; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; Match(LeftParen);
				State = 336; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 339; parameterModifier();
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 345; referenceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_constExpression);
		try {
			State = 350;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 368;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; Match(Where);
				State = 353; typeParameter();
				State = 354; Match(Colon);
				State = 355; typeParameterConstraint();
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 356; Match(Comma);
					State = 357; typeParameterConstraint();
					}
					}
					State = 362;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(Where);
				State = 364; typeParameter();
				State = 365;
				_la = TokenStream.La(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (LeftAngle - 79)) | (1L << (RightAngle - 79)) | (1L << (LessThanOrEqual - 79)) | (1L << (GreaterThanOrEqual - 79)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 366; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeParameterConstraint);
		try {
			State = 375;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 370; Match(New);
				State = 371; Match(LeftParen);
				State = 372; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; valueType(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 374; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ReferenceTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 40, RULE_member);
		int _la;
		try {
			int _alt;
			State = 554;
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 377; attribute();
					}
					}
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 383; modifier();
					}
					}
					State = 388;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 389; Match(New);
				State = 391;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 390; identifier();
					}
				}

				State = 393; parameterList();
				State = 396;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 394; Match(Lambda);
					State = 395; ((ConstructorContext)_localctx).returnType = referenceType();
					}
				}

				State = 399;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 398; constructorInitializer();
					}
				}

				State = 401; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 403; attribute();
					}
					}
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 409; modifier();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 415; Match(Delete);
				State = 416; parameterList();
				State = 417; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 419; attribute();
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 425; modifier();
					}
					}
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 431; Match(Conversion);
				State = 433;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 432; typeArguments();
					}
				}

				State = 435; parameterList();
				State = 436; Match(Lambda);
				State = 437; referenceType();
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 438; typeParameterConstraintClause();
					}
					}
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 444; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 446; attribute();
					}
					}
					State = 451;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 452; modifier();
					}
					}
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 458;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 459; identifier();
				State = 462;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 460; Match(Colon);
					State = 461; referenceType();
					}
				}

				State = 466;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 464; Match(Assign);
					State = 465; expression(0);
					}
				}

				State = 468; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 470; attribute();
					}
					}
					State = 475;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 476; modifier();
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 482;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 483; identifier();
				State = 485;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 484; typeArguments();
					}
				}

				State = 487; parameterList();
				State = 488; Match(Lambda);
				State = 489; referenceType();
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 490; typeParameterConstraintClause();
					}
					}
					State = 495;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 496; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 498; attribute();
					}
					}
					State = 503;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 504; modifier();
					}
					}
					State = 509;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 510;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 511; Match(LeftBracket);
				State = 512; Match(RightBracket);
				State = 514;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 513; typeArguments();
					}
				}

				State = 516; parameterList();
				State = 517; Match(Lambda);
				State = 518; referenceType();
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 519; typeParameterConstraintClause();
					}
					}
					State = 524;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 525; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 527; attribute();
						}
						} 
					}
					State = 532;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 533; modifier();
					}
					}
					State = 538;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 539; identifier();
				State = 541;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 540; typeArguments();
					}
				}

				State = 543; parameterList();
				State = 544; Match(Lambda);
				State = 545; ((MethodContext)_localctx).returnType = referenceType();
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 546; typeParameterConstraintClause();
					}
					}
					State = 551;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 552; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameterList);
		int _la;
		try {
			State = 569;
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 556; Match(LeftParen);
				State = 557; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 558; Match(Comma);
					State = 559; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 564;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 565; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567; Match(LeftParen);
				State = 568; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public IToken token;
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameter);
		int _la;
		try {
			State = 595;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 571; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 576;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 578;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 577; identifier();
					}
				}

				State = 580; Match(Colon);
				State = 581; referenceType();
				}
				break;
			case 2:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 582; ((SelfParameterContext)_localctx)._parameterModifier = parameterModifier();
					((SelfParameterContext)_localctx)._modifiers.Add(((SelfParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 587;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 589;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 588; Match(Own);
					}
				}

				State = 592;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 591; Match(Mutable);
					}
				}

				State = 594; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 48, RULE_constructorInitializer);
		try {
			State = 611;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599; Match(Colon);
				State = 600; Match(Base);
				State = 601; Match(LeftParen);
				State = 602; argumentList();
				State = 603; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605; Match(Colon);
				State = 606; Match(Self);
				State = 607; Match(LeftParen);
				State = 608; argumentList();
				State = 609; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 50, RULE_argumentList);
		int _la;
		try {
			State = 622;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 613; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 614; Match(Comma);
					State = 615; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 620;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodBody);
		int _la;
		try {
			State = 633;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; Match(LeftBrace);
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Return) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (BooleanLiteral - 66)) | (1L << (IntLiteral - 66)) | (1L << (NullLiteral - 66)) | (1L << (StringLiteral - 66)) | (1L << (Semicolon - 66)) | (1L << (LeftBrace - 66)) | (1L << (Asterisk - 66)) | (1L << (AddressOf - 66)) | (1L << (Plus - 66)) | (1L << (Minus - 66)) | (1L << (Not - 66)) | (1L << (Identifier - 66)) | (1L << (EscapedIdentifier - 66)))) != 0)) {
					{
					{
					State = 625; statement();
					}
					}
					State = 630;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 631; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 632; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_overloadableOperator);
		try {
			State = 645;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 637; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 638; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 639; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 640; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 641; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 642; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 643; Match(LeftBracket);
				State = 644; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_statement);
		int _la;
		try {
			State = 715;
			switch (TokenStream.La(1)) {
			case Var:
			case Let:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 647; localVariableDeclaration();
				State = 648; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 650; Match(Unsafe);
				State = 651; Match(LeftBrace);
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Return) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (BooleanLiteral - 66)) | (1L << (IntLiteral - 66)) | (1L << (NullLiteral - 66)) | (1L << (StringLiteral - 66)) | (1L << (Semicolon - 66)) | (1L << (LeftBrace - 66)) | (1L << (Asterisk - 66)) | (1L << (AddressOf - 66)) | (1L << (Plus - 66)) | (1L << (Minus - 66)) | (1L << (Not - 66)) | (1L << (Identifier - 66)) | (1L << (EscapedIdentifier - 66)))) != 0)) {
					{
					{
					State = 652; statement();
					}
					}
					State = 657;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 658; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 659; Match(LeftBrace);
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Return) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (BooleanLiteral - 66)) | (1L << (IntLiteral - 66)) | (1L << (NullLiteral - 66)) | (1L << (StringLiteral - 66)) | (1L << (Semicolon - 66)) | (1L << (LeftBrace - 66)) | (1L << (Asterisk - 66)) | (1L << (AddressOf - 66)) | (1L << (Plus - 66)) | (1L << (Minus - 66)) | (1L << (Not - 66)) | (1L << (Identifier - 66)) | (1L << (EscapedIdentifier - 66)))) != 0)) {
					{
					{
					State = 660; statement();
					}
					}
					State = 665;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 666; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 667; Match(Semicolon);
				}
				break;
			case New:
			case Self:
			case Uninitialized:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 668; expression(0);
				State = 669; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 671; Match(Return);
				State = 672; expression(0);
				State = 673; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 675; Match(Throw);
				State = 676; expression(0);
				State = 677; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 679; Match(If);
				State = 680; Match(LeftParen);
				State = 681; ((IfStatementContext)_localctx).condition = expression(0);
				State = 682; Match(RightParen);
				State = 683; ((IfStatementContext)_localctx).then = statement();
				State = 686;
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 684; Match(Else);
					State = 685; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 688; Match(For);
				State = 689; Match(LeftParen);
				State = 691;
				_la = TokenStream.La(1);
				if (_la==Var || _la==Let) {
					{
					State = 690; localVariableDeclaration();
					}
				}

				State = 693; Match(Semicolon);
				State = 695;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (BooleanLiteral - 66)) | (1L << (IntLiteral - 66)) | (1L << (NullLiteral - 66)) | (1L << (StringLiteral - 66)) | (1L << (Asterisk - 66)) | (1L << (AddressOf - 66)) | (1L << (Plus - 66)) | (1L << (Minus - 66)) | (1L << (Not - 66)) | (1L << (Identifier - 66)) | (1L << (EscapedIdentifier - 66)))) != 0)) {
					{
					State = 694; expression(0);
					}
				}

				State = 697; Match(Semicolon);
				State = 699;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (BooleanLiteral - 66)) | (1L << (IntLiteral - 66)) | (1L << (NullLiteral - 66)) | (1L << (StringLiteral - 66)) | (1L << (Asterisk - 66)) | (1L << (AddressOf - 66)) | (1L << (Plus - 66)) | (1L << (Minus - 66)) | (1L << (Not - 66)) | (1L << (Identifier - 66)) | (1L << (EscapedIdentifier - 66)))) != 0)) {
					{
					State = 698; expression(0);
					}
				}

				State = 701; Match(RightParen);
				State = 702; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 703; Match(Foreach);
				State = 704; Match(LeftParen);
				State = 705; localVariableDeclaration();
				State = 706; Match(In);
				State = 707; expression(0);
				State = 708; Match(RightParen);
				State = 709; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 711; Match(Delete);
				State = 712; expression(0);
				State = 713; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 718; identifier();
			State = 721;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 719; Match(Colon);
				State = 720; referenceType();
				}
			}

			State = 725;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 723; Match(Assign);
				State = 724; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 728;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (Asterisk - 85)) | (1L << (AddressOf - 85)) | (1L << (Plus - 85)) | (1L << (Minus - 85)) | (1L << (Not - 85)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 729; expression(20);
				}
				break;
			case 2:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 730; identifier();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 731; Match(New);
				State = 732; name(0);
				State = 733; Match(LeftParen);
				State = 734; argumentList();
				State = 735; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 737; Match(New);
				State = 739;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 738; baseTypes();
					}
				}

				State = 741; Match(LeftParen);
				State = 742; argumentList();
				State = 743; Match(RightParen);
				State = 744; Match(LeftBrace);
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 745; member();
					}
					}
					State = 750;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 751; Match(RightBrace);
				}
				break;
			case 5:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 753; Match(NullLiteral);
				}
				break;
			case 6:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 754; Match(Self);
				}
				break;
			case 7:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 755; Match(BooleanLiteral);
				}
				break;
			case 8:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 756; Match(IntLiteral);
				}
				break;
			case 9:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 757; Match(Uninitialized);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 758; Match(StringLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 814;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 812;
					switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 761;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 762;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 763; expression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 764;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 765;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 766; expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 767;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 768;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (LeftAngle - 79)) | (1L << (RightAngle - 79)) | (1L << (LessThanOrEqual - 79)) | (1L << (GreaterThanOrEqual - 79)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 769; expression(18);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 770;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 771;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 772; ((EqualityExpressionContext)_localctx).rhs = expression(17);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 773;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 774; Match(And);
						State = 775; expression(16);
						}
						break;
					case 6:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 776;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 777; Match(Xor);
						State = 778; expression(15);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 779;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 780; Match(Or);
						State = 781; expression(14);
						}
						break;
					case 8:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 782;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 783; Match(Coalesce);
						State = 784; expression(13);
						}
						break;
					case 9:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 785;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 786; Match(IsNull);
						State = 787; ((IfExpressionContext)_localctx).then = expression(0);
						State = 788; Match(Colon);
						State = 789; ((IfExpressionContext)_localctx).@else = expression(11);
						}
						break;
					case 10:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 791;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 792;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (Assign - 109)) | (1L << (AddAssign - 109)) | (1L << (SubtractAssign - 109)) | (1L << (MultiplyAssign - 109)) | (1L << (DivideAssign - 109)) | (1L << (AndAssign - 109)) | (1L << (XorAssign - 109)) | (1L << (OrAssign - 109)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 793; ((AssignmentExpressionContext)_localctx).rvalue = expression(10);
						}
						break;
					case 11:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 794;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 795; Match(Dot);
						State = 796; identifier();
						}
						break;
					case 12:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 797;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 798; Match(Lambda);
						State = 799; identifier();
						}
						break;
					case 13:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 800;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 801; Match(LeftParen);
						State = 802; argumentList();
						State = 803; Match(RightParen);
						}
						break;
					case 14:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 805;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 806; Match(LeftBracket);
						State = 807; argumentList();
						State = 808; Match(RightBracket);
						}
						break;
					case 15:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 810;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 811; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return name_sempred((NameContext)_localctx, predIndex);
		case 13: return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 30: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 14);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3y\x334\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\a\x2\x42\n\x2\f\x2\xE\x2\x45\v\x2\x3\x2\a\x2H\n\x2\f\x2\xE\x2K\v\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4U\n\x4\x3\x5\x3\x5"+
		"\x3\x5\a\x5Z\n\x5\f\x5\xE\x5]\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x63\n"+
		"\x6\f\x6\xE\x6\x66\v\x6\x3\x6\a\x6i\n\x6\f\x6\xE\x6l\v\x6\x3\x6\x3\x6"+
		"\x3\x6\a\x6q\n\x6\f\x6\xE\x6t\v\x6\x3\x6\a\x6w\n\x6\f\x6\xE\x6z\v\x6\x3"+
		"\x6\x3\x6\x3\x6\x5\x6\x7F\n\x6\x3\x6\x5\x6\x82\n\x6\x3\x6\a\x6\x85\n\x6"+
		"\f\x6\xE\x6\x88\v\x6\x3\x6\x3\x6\a\x6\x8C\n\x6\f\x6\xE\x6\x8F\v\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6\x94\n\x6\f\x6\xE\x6\x97\v\x6\x3\x6\a\x6\x9A\n\x6"+
		"\f\x6\xE\x6\x9D\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xA3\n\x6\x3\x6\x3\x6"+
		"\x5\x6\xA7\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xAC\n\x6\f\x6\xE\x6\xAF\v\x6\x3"+
		"\x6\a\x6\xB2\n\x6\f\x6\xE\x6\xB5\v\x6\x3\x6\x3\x6\x5\x6\xB9\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\xBF\n\x6\f\x6\xE\x6\xC2\v\x6\x3\x6\x3\x6\x5\x6"+
		"\xC6\n\x6\x3\a\x3\a\x3\a\x5\a\xCB\n\a\x3\b\x3\b\x5\b\xCF\n\b\x3\b\x3\b"+
		"\x3\b\x3\b\a\b\xD5\n\b\f\b\xE\b\xD8\v\b\x5\b\xDA\n\b\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xEA\n\t\x3\n"+
		"\x3\n\x3\n\x3\n\a\n\xF0\n\n\f\n\xE\n\xF3\v\n\x3\n\x3\n\x3\v\x3\v\x5\v"+
		"\xF9\n\v\x3\v\x3\v\x5\v\xFD\n\v\x3\f\x3\f\x3\f\x3\f\a\f\x103\n\f\f\f\xE"+
		"\f\x106\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\x10E\n\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\a\xE\x116\n\xE\f\xE\xE\xE\x119\v\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x123\n\xF\f\xF\xE\xF\x126\v"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x12C\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x132\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x138\n\xF\f\xF\xE\xF\x13B\v"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x145"+
		"\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x14B\n\x11\f\x11\xE\x11\x14E"+
		"\v\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x154\n\x11\x3\x12\a\x12\x157"+
		"\n\x12\f\x12\xE\x12\x15A\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\x161\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x169\n\x14"+
		"\f\x14\xE\x14\x16C\v\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x173"+
		"\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x17A\n\x15\x3\x16\a\x16"+
		"\x17D\n\x16\f\x16\xE\x16\x180\v\x16\x3\x16\a\x16\x183\n\x16\f\x16\xE\x16"+
		"\x186\v\x16\x3\x16\x3\x16\x5\x16\x18A\n\x16\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x18F\n\x16\x3\x16\x5\x16\x192\n\x16\x3\x16\x3\x16\x3\x16\a\x16\x197\n"+
		"\x16\f\x16\xE\x16\x19A\v\x16\x3\x16\a\x16\x19D\n\x16\f\x16\xE\x16\x1A0"+
		"\v\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x1A7\n\x16\f\x16\xE\x16"+
		"\x1AA\v\x16\x3\x16\a\x16\x1AD\n\x16\f\x16\xE\x16\x1B0\v\x16\x3\x16\x3"+
		"\x16\x5\x16\x1B4\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x1BA\n\x16\f"+
		"\x16\xE\x16\x1BD\v\x16\x3\x16\x3\x16\x3\x16\a\x16\x1C2\n\x16\f\x16\xE"+
		"\x16\x1C5\v\x16\x3\x16\a\x16\x1C8\n\x16\f\x16\xE\x16\x1CB\v\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x5\x16\x1D1\n\x16\x3\x16\x3\x16\x5\x16\x1D5\n\x16"+
		"\x3\x16\x3\x16\x3\x16\a\x16\x1DA\n\x16\f\x16\xE\x16\x1DD\v\x16\x3\x16"+
		"\a\x16\x1E0\n\x16\f\x16\xE\x16\x1E3\v\x16\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x1E8\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x1EE\n\x16\f\x16\xE\x16"+
		"\x1F1\v\x16\x3\x16\x3\x16\x3\x16\a\x16\x1F6\n\x16\f\x16\xE\x16\x1F9\v"+
		"\x16\x3\x16\a\x16\x1FC\n\x16\f\x16\xE\x16\x1FF\v\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x5\x16\x205\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x20B\n"+
		"\x16\f\x16\xE\x16\x20E\v\x16\x3\x16\x3\x16\x3\x16\a\x16\x213\n\x16\f\x16"+
		"\xE\x16\x216\v\x16\x3\x16\a\x16\x219\n\x16\f\x16\xE\x16\x21C\v\x16\x3"+
		"\x16\x3\x16\x5\x16\x220\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x226\n"+
		"\x16\f\x16\xE\x16\x229\v\x16\x3\x16\x3\x16\x5\x16\x22D\n\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\a\x17\x233\n\x17\f\x17\xE\x17\x236\v\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x5\x17\x23C\n\x17\x3\x18\a\x18\x23F\n\x18\f\x18\xE"+
		"\x18\x242\v\x18\x3\x18\x5\x18\x245\n\x18\x3\x18\x3\x18\x3\x18\a\x18\x24A"+
		"\n\x18\f\x18\xE\x18\x24D\v\x18\x3\x18\x5\x18\x250\n\x18\x3\x18\x5\x18"+
		"\x253\n\x18\x3\x18\x5\x18\x256\n\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A"+
		"\x266\n\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B\x26B\n\x1B\f\x1B\xE\x1B\x26E\v"+
		"\x1B\x3\x1B\x5\x1B\x271\n\x1B\x3\x1C\x3\x1C\a\x1C\x275\n\x1C\f\x1C\xE"+
		"\x1C\x278\v\x1C\x3\x1C\x3\x1C\x5\x1C\x27C\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x288\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x290\n\x1E\f\x1E\xE\x1E\x293"+
		"\v\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x298\n\x1E\f\x1E\xE\x1E\x29B\v\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5"+
		"\x1E\x2B1\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2B6\n\x1E\x3\x1E\x3\x1E\x5"+
		"\x1E\x2BA\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2BE\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x2CE\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2D4\n\x1F\x3"+
		"\x1F\x3\x1F\x5\x1F\x2D8\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x5 \x2E6\n \x3 \x3 \x3 \x3 \x3 \a \x2ED\n \f \xE \x2F0\v \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2FA\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x32F\n \f \xE \x332\v \x3 \x2"+
		"\x5\x1A\x1C>!\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&("+
		"*,.\x30\x32\x34\x36\x38:<>\x2\v\x3\x2\x14\x15\x3\x2=\x43\x4\x2QR^_\x3"+
		"\x2\x16\x17\x6\x2WWYY\x61\x62hh\x4\x2WW\x63\x63\x3\x2\x61\x62\x3\x2\\"+
		"]\x3\x2ov\x3B8\x2\x43\x3\x2\x2\x2\x4N\x3\x2\x2\x2\x6T\x3\x2\x2\x2\bV\x3"+
		"\x2\x2\x2\n\xC5\x3\x2\x2\x2\f\xC7\x3\x2\x2\x2\xE\xCC\x3\x2\x2\x2\x10\xE9"+
		"\x3\x2\x2\x2\x12\xEB\x3\x2\x2\x2\x14\xF6\x3\x2\x2\x2\x16\xFE\x3\x2\x2"+
		"\x2\x18\x10D\x3\x2\x2\x2\x1A\x10F\x3\x2\x2\x2\x1C\x131\x3\x2\x2\x2\x1E"+
		"\x144\x3\x2\x2\x2 \x153\x3\x2\x2\x2\"\x158\x3\x2\x2\x2$\x160\x3\x2\x2"+
		"\x2&\x172\x3\x2\x2\x2(\x179\x3\x2\x2\x2*\x22C\x3\x2\x2\x2,\x23B\x3\x2"+
		"\x2\x2.\x255\x3\x2\x2\x2\x30\x257\x3\x2\x2\x2\x32\x265\x3\x2\x2\x2\x34"+
		"\x270\x3\x2\x2\x2\x36\x27B\x3\x2\x2\x2\x38\x287\x3\x2\x2\x2:\x2CD\x3\x2"+
		"\x2\x2<\x2CF\x3\x2\x2\x2>\x2F9\x3\x2\x2\x2@\x42\x5\x4\x3\x2\x41@\x3\x2"+
		"\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44"+
		"I\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46H\x5\n\x6\x2G\x46\x3\x2\x2\x2HK\x3"+
		"\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a"+
		"\x2\x2\x3M\x3\x3\x2\x2\x2NO\a\n\x2\x2OP\x5\b\x5\x2PQ\aH\x2\x2Q\x5\x3\x2"+
		"\x2\x2RU\aw\x2\x2SU\ax\x2\x2TR\x3\x2\x2\x2TS\x3\x2\x2\x2U\a\x3\x2\x2\x2"+
		"V[\x5\x6\x4\x2WX\aJ\x2\x2XZ\x5\x6\x4\x2YW\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y"+
		"\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\t\x3\x2\x2\x2][\x3\x2\x2\x2^_\a\v\x2\x2"+
		"_`\x5\b\x5\x2`\x64\aO\x2\x2\x61\x63\x5\x4\x3\x2\x62\x61\x3\x2\x2\x2\x63"+
		"\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65j\x3\x2\x2"+
		"\x2\x66\x64\x3\x2\x2\x2gi\x5\n\x6\x2hg\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3"+
		"\x2\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2lj\x3\x2\x2\x2mn\aP\x2\x2n\xC6\x3"+
		"\x2\x2\x2oq\x5\f\a\x2po\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2"+
		"\x2\x2sx\x3\x2\x2\x2tr\x3\x2\x2\x2uw\x5\x10\t\x2vu\x3\x2\x2\x2wz\x3\x2"+
		"\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y{\x3\x2\x2\x2zx\x3\x2\x2\x2{|\a\f\x2"+
		"\x2|~\x5\x6\x4\x2}\x7F\x5\x12\n\x2~}\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F"+
		"\x81\x3\x2\x2\x2\x80\x82\x5\xE\b\x2\x81\x80\x3\x2\x2\x2\x81\x82\x3\x2"+
		"\x2\x2\x82\x86\x3\x2\x2\x2\x83\x85\x5&\x14\x2\x84\x83\x3\x2\x2\x2\x85"+
		"\x88\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x89\x3\x2"+
		"\x2\x2\x88\x86\x3\x2\x2\x2\x89\x8D\aO\x2\x2\x8A\x8C\x5*\x16\x2\x8B\x8A"+
		"\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2"+
		"\x2\x8E\x90\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x91\aP\x2\x2\x91\xC6\x3"+
		"\x2\x2\x2\x92\x94\x5\f\a\x2\x93\x92\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95"+
		"\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x9B\x3\x2\x2\x2\x97\x95\x3\x2"+
		"\x2\x2\x98\x9A\x5\x10\t\x2\x99\x98\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B"+
		"\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2"+
		"\x2\x2\x9E\x9F\t\x2\x2\x2\x9F\xA2\x5\x6\x4\x2\xA0\xA1\aI\x2\x2\xA1\xA3"+
		"\x5\x1E\x10\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA6\x3\x2\x2"+
		"\x2\xA4\xA5\ao\x2\x2\xA5\xA7\x5> \x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2"+
		"\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\aH\x2\x2\xA9\xC6\x3\x2\x2\x2\xAA\xAC"+
		"\x5\f\a\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2"+
		"\xAD\xAE\x3\x2\x2\x2\xAE\xB3\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xB0\xB2\x5"+
		"\x10\t\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2"+
		"\xB3\xB4\x3\x2\x2\x2\xB4\xB6\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB8\x5"+
		"\x6\x4\x2\xB7\xB9\x5\x16\f\x2\xB8\xB7\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2"+
		"\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x5,\x17\x2\xBB\xBC\aN\x2\x2\xBC\xC0\x5\x1E"+
		"\x10\x2\xBD\xBF\x5&\x14\x2\xBE\xBD\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0"+
		"\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC3\x3\x2\x2\x2\xC2\xC0\x3\x2"+
		"\x2\x2\xC3\xC4\x5\x36\x1C\x2\xC4\xC6\x3\x2\x2\x2\xC5^\x3\x2\x2\x2\xC5"+
		"r\x3\x2\x2\x2\xC5\x95\x3\x2\x2\x2\xC5\xAD\x3\x2\x2\x2\xC6\v\x3\x2\x2\x2"+
		"\xC7\xCA\ax\x2\x2\xC8\xC9\aU\x2\x2\xC9\xCB\aV\x2\x2\xCA\xC8\x3\x2\x2\x2"+
		"\xCA\xCB\x3\x2\x2\x2\xCB\r\x3\x2\x2\x2\xCC\xCE\aI\x2\x2\xCD\xCF\x5\x1A"+
		"\xE\x2\xCE\xCD\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD9\x3\x2\x2\x2\xD0"+
		"\xD1\aI\x2\x2\xD1\xD6\x5\x1A\xE\x2\xD2\xD3\aM\x2\x2\xD3\xD5\x5\x1A\xE"+
		"\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6\xD7"+
		"\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xD0\x3\x2\x2"+
		"\x2\xD9\xDA\x3\x2\x2\x2\xDA\xF\x3\x2\x2\x2\xDB\xEA\a\x31\x2\x2\xDC\xEA"+
		"\a\x32\x2\x2\xDD\xEA\a\x33\x2\x2\xDE\xEA\a\x34\x2\x2\xDF\xEA\a\x35\x2"+
		"\x2\xE0\xEA\a\x36\x2\x2\xE1\xEA\a\x1B\x2\x2\xE2\xEA\a\x1A\x2\x2\xE3\xEA"+
		"\a.\x2\x2\xE4\xEA\a/\x2\x2\xE5\xEA\a\x18\x2\x2\xE6\xEA\a\x19\x2\x2\xE7"+
		"\xEA\a:\x2\x2\xE8\xEA\a\x1D\x2\x2\xE9\xDB\x3\x2\x2\x2\xE9\xDC\x3\x2\x2"+
		"\x2\xE9\xDD\x3\x2\x2\x2\xE9\xDE\x3\x2\x2\x2\xE9\xDF\x3\x2\x2\x2\xE9\xE0"+
		"\x3\x2\x2\x2\xE9\xE1\x3\x2\x2\x2\xE9\xE2\x3\x2\x2\x2\xE9\xE3\x3\x2\x2"+
		"\x2\xE9\xE4\x3\x2\x2\x2\xE9\xE5\x3\x2\x2\x2\xE9\xE6\x3\x2\x2\x2\xE9\xE7"+
		"\x3\x2\x2\x2\xE9\xE8\x3\x2\x2\x2\xEA\x11\x3\x2\x2\x2\xEB\xEC\aQ\x2\x2"+
		"\xEC\xF1\x5\x14\v\x2\xED\xEE\aM\x2\x2\xEE\xF0\x5\x14\v\x2\xEF\xED\x3\x2"+
		"\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2"+
		"\xF4\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4\xF5\aR\x2\x2\xF5\x13\x3\x2\x2"+
		"\x2\xF6\xF8\x5\x6\x4\x2\xF7\xF9\a`\x2\x2\xF8\xF7\x3\x2\x2\x2\xF8\xF9\x3"+
		"\x2\x2\x2\xF9\xFC\x3\x2\x2\x2\xFA\xFB\aI\x2\x2\xFB\xFD\x5\x1C\xF\x2\xFC"+
		"\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\x15\x3\x2\x2\x2\xFE\xFF\aQ\x2"+
		"\x2\xFF\x104\x5\x1E\x10\x2\x100\x101\aM\x2\x2\x101\x103\x5\x1E\x10\x2"+
		"\x102\x100\x3\x2\x2\x2\x103\x106\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104"+
		"\x105\x3\x2\x2\x2\x105\x107\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x108"+
		"\aR\x2\x2\x108\x17\x3\x2\x2\x2\x109\x10E\x5\x6\x4\x2\x10A\x10B\x5\x6\x4"+
		"\x2\x10B\x10C\x5\x16\f\x2\x10C\x10E\x3\x2\x2\x2\x10D\x109\x3\x2\x2\x2"+
		"\x10D\x10A\x3\x2\x2\x2\x10E\x19\x3\x2\x2\x2\x10F\x110\b\xE\x1\x2\x110"+
		"\x111\x5\x18\r\x2\x111\x117\x3\x2\x2\x2\x112\x113\f\x3\x2\x2\x113\x114"+
		"\aJ\x2\x2\x114\x116\x5\x18\r\x2\x115\x112\x3\x2\x2\x2\x116\x119\x3\x2"+
		"\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x1B\x3\x2\x2\x2"+
		"\x119\x117\x3\x2\x2\x2\x11A\x11B\b\xF\x1\x2\x11B\x132\x5\x1A\xE\x2\x11C"+
		"\x132\a<\x2\x2\x11D\x132\t\x3\x2\x2\x11E\x11F\aS\x2\x2\x11F\x124\x5\x1C"+
		"\xF\x2\x120\x121\aM\x2\x2\x121\x123\x5\x1C\xF\x2\x122\x120\x3\x2\x2\x2"+
		"\x123\x126\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125"+
		"\x127\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127\x128\aT\x2\x2\x128\x12C\x3"+
		"\x2\x2\x2\x129\x12A\aS\x2\x2\x12A\x12C\aT\x2\x2\x12B\x11E\x3\x2\x2\x2"+
		"\x12B\x129\x3\x2\x2\x2\x12C\x132\x3\x2\x2\x2\x12D\x12E\x5 \x11\x2\x12E"+
		"\x12F\aN\x2\x2\x12F\x130\x5\x1E\x10\x2\x130\x132\x3\x2\x2\x2\x131\x11A"+
		"\x3\x2\x2\x2\x131\x11C\x3\x2\x2\x2\x131\x11D\x3\x2\x2\x2\x131\x12B\x3"+
		"\x2\x2\x2\x131\x12D\x3\x2\x2\x2\x132\x139\x3\x2\x2\x2\x133\x134\f\x6\x2"+
		"\x2\x134\x138\a[\x2\x2\x135\x136\f\x5\x2\x2\x136\x138\aW\x2\x2\x137\x133"+
		"\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x137\x3"+
		"\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x1D\x3\x2\x2\x2\x13B\x139\x3\x2\x2"+
		"\x2\x13C\x145\x5\x1C\xF\x2\x13D\x13E\a\x38\x2\x2\x13E\x145\x5\x1C\xF\x2"+
		"\x13F\x140\a\x37\x2\x2\x140\x145\x5\x1C\xF\x2\x141\x142\a\x37\x2\x2\x142"+
		"\x143\a\x38\x2\x2\x143\x145\x5\x1C\xF\x2\x144\x13C\x3\x2\x2\x2\x144\x13D"+
		"\x3\x2\x2\x2\x144\x13F\x3\x2\x2\x2\x144\x141\x3\x2\x2\x2\x145\x1F\x3\x2"+
		"\x2\x2\x146\x147\aU\x2\x2\x147\x14C\x5\"\x12\x2\x148\x149\aM\x2\x2\x149"+
		"\x14B\x5\"\x12\x2\x14A\x148\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A"+
		"\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14F\x3\x2\x2\x2\x14E\x14C\x3"+
		"\x2\x2\x2\x14F\x150\aV\x2\x2\x150\x154\x3\x2\x2\x2\x151\x152\aU\x2\x2"+
		"\x152\x154\aV\x2\x2\x153\x146\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x154!"+
		"\x3\x2\x2\x2\x155\x157\x5\x30\x19\x2\x156\x155\x3\x2\x2\x2\x157\x15A\x3"+
		"\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15B\x3\x2"+
		"\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15C\x5\x1E\x10\x2\x15C#\x3\x2\x2\x2"+
		"\x15D\x161\a\x45\x2\x2\x15E\x161\aG\x2\x2\x15F\x161\x5\x6\x4\x2\x160\x15D"+
		"\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x15F\x3\x2\x2\x2\x161%\x3\x2\x2"+
		"\x2\x162\x163\a\x12\x2\x2\x163\x164\x5\x14\v\x2\x164\x165\aI\x2\x2\x165"+
		"\x16A\x5(\x15\x2\x166\x167\aM\x2\x2\x167\x169\x5(\x15\x2\x168\x166\x3"+
		"\x2\x2\x2\x169\x16C\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B\x3\x2"+
		"\x2\x2\x16B\x173\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16D\x16E\a\x12\x2"+
		"\x2\x16E\x16F\x5\x14\v\x2\x16F\x170\t\x4\x2\x2\x170\x171\a\x45\x2\x2\x171"+
		"\x173\x3\x2\x2\x2\x172\x162\x3\x2\x2\x2\x172\x16D\x3\x2\x2\x2\x173\'\x3"+
		"\x2\x2\x2\x174\x175\a\xE\x2\x2\x175\x176\aU\x2\x2\x176\x17A\aV\x2\x2\x177"+
		"\x17A\x5\x1C\xF\x2\x178\x17A\x5\x14\v\x2\x179\x174\x3\x2\x2\x2\x179\x177"+
		"\x3\x2\x2\x2\x179\x178\x3\x2\x2\x2\x17A)\x3\x2\x2\x2\x17B\x17D\x5\f\a"+
		"\x2\x17C\x17B\x3\x2\x2\x2\x17D\x180\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2"+
		"\x17E\x17F\x3\x2\x2\x2\x17F\x184\x3\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x181"+
		"\x183\x5\x10\t\x2\x182\x181\x3\x2\x2\x2\x183\x186\x3\x2\x2\x2\x184\x182"+
		"\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x187\x3\x2\x2\x2\x186\x184\x3"+
		"\x2\x2\x2\x187\x189\a\xE\x2\x2\x188\x18A\x5\x6\x4\x2\x189\x188\x3\x2\x2"+
		"\x2\x189\x18A\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18E\x5,\x17\x2\x18C"+
		"\x18D\aN\x2\x2\x18D\x18F\x5\x1E\x10\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F"+
		"\x3\x2\x2\x2\x18F\x191\x3\x2\x2\x2\x190\x192\x5\x32\x1A\x2\x191\x190\x3"+
		"\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x194\x5\x36"+
		"\x1C\x2\x194\x22D\x3\x2\x2\x2\x195\x197\x5\f\a\x2\x196\x195\x3\x2\x2\x2"+
		"\x197\x19A\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199"+
		"\x19E\x3\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19B\x19D\x5\x10\t\x2\x19C\x19B"+
		"\x3\x2\x2\x2\x19D\x1A0\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3"+
		"\x2\x2\x2\x19F\x1A1\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A2\a\xF\x2"+
		"\x2\x1A2\x1A3\x5,\x17\x2\x1A3\x1A4\x5\x36\x1C\x2\x1A4\x22D\x3\x2\x2\x2"+
		"\x1A5\x1A7\x5\f\a\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\x1AA\x3\x2\x2\x2\x1A8"+
		"\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AE\x3\x2\x2\x2\x1AA\x1A8"+
		"\x3\x2\x2\x2\x1AB\x1AD\x5\x10\t\x2\x1AC\x1AB\x3\x2\x2\x2\x1AD\x1B0\x3"+
		"\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B1\x3\x2"+
		"\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B1\x1B3\a\x30\x2\x2\x1B2\x1B4\x5\x16\f"+
		"\x2\x1B3\x1B2\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2"+
		"\x1B5\x1B6\x5,\x17\x2\x1B6\x1B7\aN\x2\x2\x1B7\x1BB\x5\x1E\x10\x2\x1B8"+
		"\x1BA\x5&\x14\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9"+
		"\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x1BB\x3"+
		"\x2\x2\x2\x1BE\x1BF\x5\x36\x1C\x2\x1BF\x22D\x3\x2\x2\x2\x1C0\x1C2\x5\f"+
		"\a\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C5\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2"+
		"\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C9\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C6"+
		"\x1C8\x5\x10\t\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1CB\x3\x2\x2\x2\x1C9\x1C7"+
		"\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CC\x3\x2\x2\x2\x1CB\x1C9\x3"+
		"\x2\x2\x2\x1CC\x1CD\t\x2\x2\x2\x1CD\x1D0\x5\x6\x4\x2\x1CE\x1CF\aI\x2\x2"+
		"\x1CF\x1D1\x5\x1E\x10\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1"+
		"\x1D4\x3\x2\x2\x2\x1D2\x1D3\ao\x2\x2\x1D3\x1D5\x5> \x2\x1D4\x1D2\x3\x2"+
		"\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\aH\x2\x2"+
		"\x1D7\x22D\x3\x2\x2\x2\x1D8\x1DA\x5\f\a\x2\x1D9\x1D8\x3\x2\x2\x2\x1DA"+
		"\x1DD\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1E1"+
		"\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DE\x1E0\x5\x10\t\x2\x1DF\x1DE\x3"+
		"\x2\x2\x2\x1E0\x1E3\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2"+
		"\x2\x2\x1E2\x1E4\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E5\t\x5\x2\x2"+
		"\x1E5\x1E7\x5\x6\x4\x2\x1E6\x1E8\x5\x16\f\x2\x1E7\x1E6\x3\x2\x2\x2\x1E7"+
		"\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EA\x5,\x17\x2\x1EA\x1EB"+
		"\aN\x2\x2\x1EB\x1EF\x5\x1E\x10\x2\x1EC\x1EE\x5&\x14\x2\x1ED\x1EC\x3\x2"+
		"\x2\x2\x1EE\x1F1\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2"+
		"\x2\x1F0\x1F2\x3\x2\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F2\x1F3\x5\x36\x1C\x2"+
		"\x1F3\x22D\x3\x2\x2\x2\x1F4\x1F6\x5\f\a\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6"+
		"\x1F9\x3\x2\x2\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FD"+
		"\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1FA\x1FC\x5\x10\t\x2\x1FB\x1FA\x3"+
		"\x2\x2\x2\x1FC\x1FF\x3\x2\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3\x2"+
		"\x2\x2\x1FE\x200\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x200\x201\t\x5\x2\x2"+
		"\x201\x202\aS\x2\x2\x202\x204\aT\x2\x2\x203\x205\x5\x16\f\x2\x204\x203"+
		"\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x207\x5"+
		",\x17\x2\x207\x208\aN\x2\x2\x208\x20C\x5\x1E\x10\x2\x209\x20B\x5&\x14"+
		"\x2\x20A\x209\x3\x2\x2\x2\x20B\x20E\x3\x2\x2\x2\x20C\x20A\x3\x2\x2\x2"+
		"\x20C\x20D\x3\x2\x2\x2\x20D\x20F\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20F"+
		"\x210\x5\x36\x1C\x2\x210\x22D\x3\x2\x2\x2\x211\x213\x5\f\a\x2\x212\x211"+
		"\x3\x2\x2\x2\x213\x216\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x214\x215\x3"+
		"\x2\x2\x2\x215\x21A\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2\x217\x219\x5\x10"+
		"\t\x2\x218\x217\x3\x2\x2\x2\x219\x21C\x3\x2\x2\x2\x21A\x218\x3\x2\x2\x2"+
		"\x21A\x21B\x3\x2\x2\x2\x21B\x21D\x3\x2\x2\x2\x21C\x21A\x3\x2\x2\x2\x21D"+
		"\x21F\x5\x6\x4\x2\x21E\x220\x5\x16\f\x2\x21F\x21E\x3\x2\x2\x2\x21F\x220"+
		"\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x222\x5,\x17\x2\x222\x223\aN\x2"+
		"\x2\x223\x227\x5\x1E\x10\x2\x224\x226\x5&\x14\x2\x225\x224\x3\x2\x2\x2"+
		"\x226\x229\x3\x2\x2\x2\x227\x225\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228"+
		"\x22A\x3\x2\x2\x2\x229\x227\x3\x2\x2\x2\x22A\x22B\x5\x36\x1C\x2\x22B\x22D"+
		"\x3\x2\x2\x2\x22C\x17E\x3\x2\x2\x2\x22C\x198\x3\x2\x2\x2\x22C\x1A8\x3"+
		"\x2\x2\x2\x22C\x1C3\x3\x2\x2\x2\x22C\x1DB\x3\x2\x2\x2\x22C\x1F7\x3\x2"+
		"\x2\x2\x22C\x214\x3\x2\x2\x2\x22D+\x3\x2\x2\x2\x22E\x22F\aU\x2\x2\x22F"+
		"\x234\x5.\x18\x2\x230\x231\aM\x2\x2\x231\x233\x5.\x18\x2\x232\x230\x3"+
		"\x2\x2\x2\x233\x236\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x234\x235\x3\x2"+
		"\x2\x2\x235\x237\x3\x2\x2\x2\x236\x234\x3\x2\x2\x2\x237\x238\aV\x2\x2"+
		"\x238\x23C\x3\x2\x2\x2\x239\x23A\aU\x2\x2\x23A\x23C\aV\x2\x2\x23B\x22E"+
		"\x3\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23C-\x3\x2\x2\x2\x23D\x23F\x5\x30"+
		"\x19\x2\x23E\x23D\x3\x2\x2\x2\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2"+
		"\x2\x240\x241\x3\x2\x2\x2\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2"+
		"\x243\x245\x5\x6\x4\x2\x244\x243\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245"+
		"\x246\x3\x2\x2\x2\x246\x247\aI\x2\x2\x247\x256\x5\x1E\x10\x2\x248\x24A"+
		"\x5\x30\x19\x2\x249\x248\x3\x2\x2\x2\x24A\x24D\x3\x2\x2\x2\x24B\x249\x3"+
		"\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24F\x3\x2\x2\x2\x24D\x24B\x3\x2"+
		"\x2\x2\x24E\x250\a\x37\x2\x2\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3\x2\x2"+
		"\x2\x250\x252\x3\x2\x2\x2\x251\x253\a\x38\x2\x2\x252\x251\x3\x2\x2\x2"+
		"\x252\x253\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x256\a\x10\x2\x2\x255"+
		"\x240\x3\x2\x2\x2\x255\x24B\x3\x2\x2\x2\x256/\x3\x2\x2\x2\x257\x258\a"+
		"\x1C\x2\x2\x258\x31\x3\x2\x2\x2\x259\x25A\aI\x2\x2\x25A\x25B\a\x13\x2"+
		"\x2\x25B\x25C\aU\x2\x2\x25C\x25D\x5\x34\x1B\x2\x25D\x25E\aV\x2\x2\x25E"+
		"\x266\x3\x2\x2\x2\x25F\x260\aI\x2\x2\x260\x261\a\x10\x2\x2\x261\x262\a"+
		"U\x2\x2\x262\x263\x5\x34\x1B\x2\x263\x264\aV\x2\x2\x264\x266\x3\x2\x2"+
		"\x2\x265\x259\x3\x2\x2\x2\x265\x25F\x3\x2\x2\x2\x266\x33\x3\x2\x2\x2\x267"+
		"\x26C\x5> \x2\x268\x269\aM\x2\x2\x269\x26B\x5> \x2\x26A\x268\x3\x2\x2"+
		"\x2\x26B\x26E\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2"+
		"\x26D\x271\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26F\x271\x3\x2\x2\x2\x270"+
		"\x267\x3\x2\x2\x2\x270\x26F\x3\x2\x2\x2\x271\x35\x3\x2\x2\x2\x272\x276"+
		"\aO\x2\x2\x273\x275\x5:\x1E\x2\x274\x273\x3\x2\x2\x2\x275\x278\x3\x2\x2"+
		"\x2\x276\x274\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x279\x3\x2\x2\x2"+
		"\x278\x276\x3\x2\x2\x2\x279\x27C\aP\x2\x2\x27A\x27C\aH\x2\x2\x27B\x272"+
		"\x3\x2\x2\x2\x27B\x27A\x3\x2\x2\x2\x27C\x37\x3\x2\x2\x2\x27D\x288\aW\x2"+
		"\x2\x27E\x288\aY\x2\x2\x27F\x288\ag\x2\x2\x280\x288\a\x65\x2\x2\x281\x288"+
		"\a\x66\x2\x2\x282\x288\a[\x2\x2\x283\x288\aZ\x2\x2\x284\x288\aJ\x2\x2"+
		"\x285\x286\aS\x2\x2\x286\x288\aT\x2\x2\x287\x27D\x3\x2\x2\x2\x287\x27E"+
		"\x3\x2\x2\x2\x287\x27F\x3\x2\x2\x2\x287\x280\x3\x2\x2\x2\x287\x281\x3"+
		"\x2\x2\x2\x287\x282\x3\x2\x2\x2\x287\x283\x3\x2\x2\x2\x287\x284\x3\x2"+
		"\x2\x2\x287\x285\x3\x2\x2\x2\x288\x39\x3\x2\x2\x2\x289\x28A\x5<\x1F\x2"+
		"\x28A\x28B\aH\x2\x2\x28B\x2CE\x3\x2\x2\x2\x28C\x28D\a\x36\x2\x2\x28D\x291"+
		"\aO\x2\x2\x28E\x290\x5:\x1E\x2\x28F\x28E\x3\x2\x2\x2\x290\x293\x3\x2\x2"+
		"\x2\x291\x28F\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x294\x3\x2\x2\x2"+
		"\x293\x291\x3\x2\x2\x2\x294\x2CE\aP\x2\x2\x295\x299\aO\x2\x2\x296\x298"+
		"\x5:\x1E\x2\x297\x296\x3\x2\x2\x2\x298\x29B\x3\x2\x2\x2\x299\x297\x3\x2"+
		"\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29C\x3\x2\x2\x2\x29B\x299\x3\x2\x2"+
		"\x2\x29C\x2CE\aP\x2\x2\x29D\x2CE\aH\x2\x2\x29E\x29F\x5> \x2\x29F\x2A0"+
		"\aH\x2\x2\x2A0\x2CE\x3\x2\x2\x2\x2A1\x2A2\a)\x2\x2\x2A2\x2A3\x5> \x2\x2A3"+
		"\x2A4\aH\x2\x2\x2A4\x2CE\x3\x2\x2\x2\x2A5\x2A6\a-\x2\x2\x2A6\x2A7\x5>"+
		" \x2\x2A7\x2A8\aH\x2\x2\x2A8\x2CE\x3\x2\x2\x2\x2A9\x2AA\a \x2\x2\x2AA"+
		"\x2AB\aU\x2\x2\x2AB\x2AC\x5> \x2\x2AC\x2AD\aV\x2\x2\x2AD\x2B0\x5:\x1E"+
		"\x2\x2AE\x2AF\a!\x2\x2\x2AF\x2B1\x5:\x1E\x2\x2B0\x2AE\x3\x2\x2\x2\x2B0"+
		"\x2B1\x3\x2\x2\x2\x2B1\x2CE\x3\x2\x2\x2\x2B2\x2B3\a\"\x2\x2\x2B3\x2B5"+
		"\aU\x2\x2\x2B4\x2B6\x5<\x1F\x2\x2B5\x2B4\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2"+
		"\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B9\aH\x2\x2\x2B8\x2BA\x5> \x2\x2B9\x2B8"+
		"\x3\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BD\aH"+
		"\x2\x2\x2BC\x2BE\x5> \x2\x2BD\x2BC\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE"+
		"\x2BF\x3\x2\x2\x2\x2BF\x2C0\aV\x2\x2\x2C0\x2CE\x5:\x1E\x2\x2C1\x2C2\a"+
		"$\x2\x2\x2C2\x2C3\aU\x2\x2\x2C3\x2C4\x5<\x1F\x2\x2C4\x2C5\a#\x2\x2\x2C5"+
		"\x2C6\x5> \x2\x2C6\x2C7\aV\x2\x2\x2C7\x2C8\x5:\x1E\x2\x2C8\x2CE\x3\x2"+
		"\x2\x2\x2C9\x2CA\a\xF\x2\x2\x2CA\x2CB\x5> \x2\x2CB\x2CC\aH\x2\x2\x2CC"+
		"\x2CE\x3\x2\x2\x2\x2CD\x289\x3\x2\x2\x2\x2CD\x28C\x3\x2\x2\x2\x2CD\x295"+
		"\x3\x2\x2\x2\x2CD\x29D\x3\x2\x2\x2\x2CD\x29E\x3\x2\x2\x2\x2CD\x2A1\x3"+
		"\x2\x2\x2\x2CD\x2A5\x3\x2\x2\x2\x2CD\x2A9\x3\x2\x2\x2\x2CD\x2B2\x3\x2"+
		"\x2\x2\x2CD\x2C1\x3\x2\x2\x2\x2CD\x2C9\x3\x2\x2\x2\x2CE;\x3\x2\x2\x2\x2CF"+
		"\x2D0\t\x2\x2\x2\x2D0\x2D3\x5\x6\x4\x2\x2D1\x2D2\aI\x2\x2\x2D2\x2D4\x5"+
		"\x1E\x10\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D7\x3\x2"+
		"\x2\x2\x2D5\x2D6\ao\x2\x2\x2D6\x2D8\x5> \x2\x2D7\x2D5\x3\x2\x2\x2\x2D7"+
		"\x2D8\x3\x2\x2\x2\x2D8=\x3\x2\x2\x2\x2D9\x2DA\b \x1\x2\x2DA\x2DB\t\x6"+
		"\x2\x2\x2DB\x2FA\x5> \x16\x2DC\x2FA\x5\x6\x4\x2\x2DD\x2DE\a\xE\x2\x2\x2DE"+
		"\x2DF\x5\x1A\xE\x2\x2DF\x2E0\aU\x2\x2\x2E0\x2E1\x5\x34\x1B\x2\x2E1\x2E2"+
		"\aV\x2\x2\x2E2\x2FA\x3\x2\x2\x2\x2E3\x2E5\a\xE\x2\x2\x2E4\x2E6\x5\xE\b"+
		"\x2\x2E5\x2E4\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2"+
		"\x2E7\x2E8\aU\x2\x2\x2E8\x2E9\x5\x34\x1B\x2\x2E9\x2EA\aV\x2\x2\x2EA\x2EE"+
		"\aO\x2\x2\x2EB\x2ED\x5*\x16\x2\x2EC\x2EB\x3\x2\x2\x2\x2ED\x2F0\x3\x2\x2"+
		"\x2\x2EE\x2EC\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F1\x3\x2\x2\x2"+
		"\x2F0\x2EE\x3\x2\x2\x2\x2F1\x2F2\aP\x2\x2\x2F2\x2FA\x3\x2\x2\x2\x2F3\x2FA"+
		"\a\x46\x2\x2\x2F4\x2FA\a\x10\x2\x2\x2F5\x2FA\a\x44\x2\x2\x2F6\x2FA\a\x45"+
		"\x2\x2\x2F7\x2FA\a\x11\x2\x2\x2F8\x2FA\aG\x2\x2\x2F9\x2D9\x3\x2\x2\x2"+
		"\x2F9\x2DC\x3\x2\x2\x2\x2F9\x2DD\x3\x2\x2\x2\x2F9\x2E3\x3\x2\x2\x2\x2F9"+
		"\x2F3\x3\x2\x2\x2\x2F9\x2F4\x3\x2\x2\x2\x2F9\x2F5\x3\x2\x2\x2\x2F9\x2F6"+
		"\x3\x2\x2\x2\x2F9\x2F7\x3\x2\x2\x2\x2F9\x2F8\x3\x2\x2\x2\x2FA\x330\x3"+
		"\x2\x2\x2\x2FB\x2FC\f\x15\x2\x2\x2FC\x2FD\t\a\x2\x2\x2FD\x32F\x5> \x16"+
		"\x2FE\x2FF\f\x14\x2\x2\x2FF\x300\t\b\x2\x2\x300\x32F\x5> \x15\x301\x302"+
		"\f\x13\x2\x2\x302\x303\t\x4\x2\x2\x303\x32F\x5> \x14\x304\x305\f\x12\x2"+
		"\x2\x305\x306\t\t\x2\x2\x306\x32F\x5> \x13\x307\x308\f\x11\x2\x2\x308"+
		"\x309\a\x65\x2\x2\x309\x32F\x5> \x12\x30A\x30B\f\x10\x2\x2\x30B\x30C\a"+
		"\x66\x2\x2\x30C\x32F\x5> \x11\x30D\x30E\f\xF\x2\x2\x30E\x30F\ag\x2\x2"+
		"\x30F\x32F\x5> \x10\x310\x311\f\xE\x2\x2\x311\x312\aZ\x2\x2\x312\x32F"+
		"\x5> \xF\x313\x314\f\r\x2\x2\x314\x315\a[\x2\x2\x315\x316\x5> \x2\x316"+
		"\x317\aI\x2\x2\x317\x318\x5> \r\x318\x32F\x3\x2\x2\x2\x319\x31A\f\f\x2"+
		"\x2\x31A\x31B\t\n\x2\x2\x31B\x32F\x5> \f\x31C\x31D\f\x1B\x2\x2\x31D\x31E"+
		"\aJ\x2\x2\x31E\x32F\x5\x6\x4\x2\x31F\x320\f\x1A\x2\x2\x320\x321\aN\x2"+
		"\x2\x321\x32F\x5\x6\x4\x2\x322\x323\f\x19\x2\x2\x323\x324\aU\x2\x2\x324"+
		"\x325\x5\x34\x1B\x2\x325\x326\aV\x2\x2\x326\x32F\x3\x2\x2\x2\x327\x328"+
		"\f\x18\x2\x2\x328\x329\aS\x2\x2\x329\x32A\x5\x34\x1B\x2\x32A\x32B\aT\x2"+
		"\x2\x32B\x32F\x3\x2\x2\x2\x32C\x32D\f\x17\x2\x2\x32D\x32F\a[\x2\x2\x32E"+
		"\x2FB\x3\x2\x2\x2\x32E\x2FE\x3\x2\x2\x2\x32E\x301\x3\x2\x2\x2\x32E\x304"+
		"\x3\x2\x2\x2\x32E\x307\x3\x2\x2\x2\x32E\x30A\x3\x2\x2\x2\x32E\x30D\x3"+
		"\x2\x2\x2\x32E\x310\x3\x2\x2\x2\x32E\x313\x3\x2\x2\x2\x32E\x319\x3\x2"+
		"\x2\x2\x32E\x31C\x3\x2\x2\x2\x32E\x31F\x3\x2\x2\x2\x32E\x322\x3\x2\x2"+
		"\x2\x32E\x327\x3\x2\x2\x2\x32E\x32C\x3\x2\x2\x2\x32F\x332\x3\x2\x2\x2"+
		"\x330\x32E\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331?\x3\x2\x2\x2\x332\x330"+
		"\x3\x2\x2\x2g\x43IT[\x64jrx~\x81\x86\x8D\x95\x9B\xA2\xA6\xAD\xB3\xB8\xC0"+
		"\xC5\xCA\xCE\xD6\xD9\xE9\xF1\xF8\xFC\x104\x10D\x117\x124\x12B\x131\x137"+
		"\x139\x144\x14C\x153\x158\x160\x16A\x172\x179\x17E\x184\x189\x18E\x191"+
		"\x198\x19E\x1A8\x1AE\x1B3\x1BB\x1C3\x1C9\x1D0\x1D4\x1DB\x1E1\x1E7\x1EF"+
		"\x1F7\x1FD\x204\x20C\x214\x21A\x21F\x227\x22C\x234\x23B\x240\x244\x24B"+
		"\x24F\x252\x255\x265\x26C\x270\x276\x27B\x287\x291\x299\x2B0\x2B5\x2B9"+
		"\x2BD\x2CD\x2D3\x2D7\x2E5\x2EE\x2F9\x32E\x330";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Exploratory.Compiler.Antlr
