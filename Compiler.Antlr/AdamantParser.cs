//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Exploratory.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Enum=11, New=12, Delete=13, Self=14, Uninitialized=15, Where=16, 
		Base=17, Var=18, Let=19, Get=20, Set=21, Sealed=22, Override=23, Partial=24, 
		Abstract=25, Params=26, Extern=27, Do=28, While=29, If=30, Else=31, For=32, 
		In=33, Foreach=34, Yield=35, Switch=36, Break=37, Continue=38, Return=39, 
		Try=40, Catch=41, Finally=42, Throw=43, Implicit=44, Explicit=45, Conversion=46, 
		Public=47, Private=48, Protected=49, Package=50, Safe=51, Unsafe=52, Own=53, 
		Mutable=54, Immutable=55, Async=56, Await=57, String=58, ByteType=59, 
		IntType=60, UIntType=61, FloatType=62, FixedType=63, DecimalType=64, SizeType=65, 
		OffsetType=66, UnsafeArrayType=67, BooleanLiteral=68, IntLiteral=69, NullLiteral=70, 
		StringLiteral=71, Semicolon=72, Colon=73, Dot=74, ColonColon=75, Tilde=76, 
		Comma=77, Lambda=78, LeftBrace=79, RightBrace=80, LeftAngle=81, RightAngle=82, 
		LeftBracket=83, RightBracket=84, LeftParen=85, RightParen=86, Asterisk=87, 
		AtSign=88, AddressOf=89, Coalesce=90, IsNull=91, Equal=92, NotEqual=93, 
		LessThanOrEqual=94, GreaterThanOrEqual=95, TypeList=96, Plus=97, Minus=98, 
		Divide=99, Pipe=100, And=101, Xor=102, Or=103, Not=104, BitAnd=105, BitOr=106, 
		BitXor=107, BitNot=108, BitShiftLeft=109, BitShiftRight=110, Assign=111, 
		AddAssign=112, SubtractAssign=113, MultiplyAssign=114, DivideAssign=115, 
		AndAssign=116, XorAssign=117, OrAssign=118, Identifier=119, EscapedIdentifier=120, 
		Unknown=121;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_baseTypes = 6, 
		RULE_modifier = 7, RULE_typeParameters = 8, RULE_typeParameter = 9, RULE_typeArguments = 10, 
		RULE_identifierOrPredefinedType = 11, RULE_simpleName = 12, RULE_name = 13, 
		RULE_valueType = 14, RULE_referenceType = 15, RULE_funcTypeParameterList = 16, 
		RULE_funcTypeParameter = 17, RULE_constExpression = 18, RULE_typeParameterConstraintClause = 19, 
		RULE_typeParameterConstraint = 20, RULE_member = 21, RULE_parameterList = 22, 
		RULE_parameter = 23, RULE_parameterModifier = 24, RULE_constructorInitializer = 25, 
		RULE_argumentList = 26, RULE_methodBody = 27, RULE_overloadableOperator = 28, 
		RULE_statement = 29, RULE_localVariableDeclaration = 30, RULE_expression = 31;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"attribute", "baseTypes", "modifier", "typeParameters", "typeParameter", 
		"typeArguments", "identifierOrPredefinedType", "simpleName", "name", "valueType", 
		"referenceType", "funcTypeParameterList", "funcTypeParameter", "constExpression", 
		"typeParameterConstraintClause", "typeParameterConstraint", "member", 
		"parameterList", "parameter", "parameterModifier", "constructorInitializer", 
		"argumentList", "methodBody", "overloadableOperator", "statement", "localVariableDeclaration", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'self'", "'uninitialized'", 
		"'where'", "'base'", "'var'", "'let'", "'get'", "'set'", "'sealed'", "'override'", 
		"'partial'", "'abstract'", "'params'", "'extern'", "'do'", "'while'", 
		"'if'", "'else'", "'for'", "'in'", "'foreach'", "'yeild'", "'switch'", 
		"'break'", "'continue'", "'return'", "'try'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'public'", "'private'", 
		"'protected'", "'package'", "'safe'", "'unsafe'", "'own'", "'mut'", "'immut'", 
		"'async'", "'await'", "'string'", "'byte'", null, null, null, null, null, 
		"'size'", "'offset'", "'UnsafeArray'", null, null, "'null'", null, "';'", 
		"':'", "'.'", "'::'", "'~'", "','", "'->'", "'{'", "'}'", "'<'", "'>'", 
		"'['", "']'", "'('", "')'", "'*'", "'@'", "'&'", "'??'", "'?'", "'=='", 
		"'<>'", "'<='", "'>='", "'...'", "'+'", "'-'", "'/'", "'|'", "'and'", 
		"'xor'", "'or'", "'not'", "'bit_and'", "'bit_or'", "'bit_xor'", "'bit_not'", 
		"'bit_shift_left'", "'bit_shift_right'", "'='", "'+='", "'-='", "'*='", 
		"'/='", "'and='", "'xor='", "'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Enum", "New", "Delete", "Self", "Uninitialized", "Where", "Base", 
		"Var", "Let", "Get", "Set", "Sealed", "Override", "Partial", "Abstract", 
		"Params", "Extern", "Do", "While", "If", "Else", "For", "In", "Foreach", 
		"Yield", "Switch", "Break", "Continue", "Return", "Try", "Catch", "Finally", 
		"Throw", "Implicit", "Explicit", "Conversion", "Public", "Private", "Protected", 
		"Package", "Safe", "Unsafe", "Own", "Mutable", "Immutable", "Async", "Await", 
		"String", "ByteType", "IntType", "UIntType", "FloatType", "FixedType", 
		"DecimalType", "SizeType", "OffsetType", "UnsafeArrayType", "BooleanLiteral", 
		"IntLiteral", "NullLiteral", "StringLiteral", "Semicolon", "Colon", "Dot", 
		"ColonColon", "Tilde", "Comma", "Lambda", "LeftBrace", "RightBrace", "LeftAngle", 
		"RightAngle", "LeftBracket", "RightBracket", "LeftParen", "RightParen", 
		"Asterisk", "AtSign", "AddressOf", "Coalesce", "IsNull", "Equal", "NotEqual", 
		"LessThanOrEqual", "GreaterThanOrEqual", "TypeList", "Plus", "Minus", 
		"Divide", "Pipe", "And", "Xor", "Or", "Not", "BitAnd", "BitOr", "BitXor", 
		"BitNot", "BitShiftLeft", "BitShiftRight", "Assign", "AddAssign", "SubtractAssign", 
		"MultiplyAssign", "DivideAssign", "AndAssign", "XorAssign", "OrAssign", 
		"Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 64; usingDirective();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 70; declaration();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 76; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(Using);
			State = 79; namespaceName();
			State = 80; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 84;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 87; Match(Dot);
				State = 88; _localctx._identifier = identifier();
				_localctx._identifiers.Add(_localctx._identifier);
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 197;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; Match(Namespace);
				State = 95; namespaceName();
				State = 96; Match(LeftBrace);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 97; usingDirective();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 103; declaration();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 109; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 111; attribute();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 117; modifier();
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 123; Match(Class);
				State = 124; identifier();
				State = 126;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 125; typeParameters();
					}
				}

				State = 129;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 128; baseTypes();
					}
				}

				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 131; typeParameterConstraintClause();
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 137; Match(LeftBrace);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 138; member();
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 144; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 146; attribute();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 152; modifier();
					}
					}
					State = 157;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 158;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 159; identifier();
				State = 162;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 160; Match(Colon);
					State = 161; referenceType();
					}
				}

				State = 166;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 164; Match(Assign);
					State = 165; expression(0);
					}
				}

				State = 168; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 170; attribute();
						}
						} 
					}
					State = 175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 176; modifier();
					}
					}
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 182; identifier();
				State = 184;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 183; typeArguments();
					}
				}

				State = 186; parameterList();
				State = 187; Match(Lambda);
				State = 188; ((FunctionDeclarationContext)_localctx).returnType = referenceType();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 189; typeParameterConstraintClause();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 195; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(EscapedIdentifier);
			State = 202;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 200; Match(LeftParen);
				State = 201; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 204; Match(Colon);
			State = 206;
			_la = TokenStream.La(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (String - 58)) | (1L << (ByteType - 58)) | (1L << (IntType - 58)) | (1L << (UIntType - 58)) | (1L << (FloatType - 58)) | (1L << (FixedType - 58)) | (1L << (DecimalType - 58)) | (1L << (SizeType - 58)) | (1L << (OffsetType - 58)) | (1L << (UnsafeArrayType - 58)) | (1L << (Identifier - 58)) | (1L << (EscapedIdentifier - 58)))) != 0)) {
				{
				State = 205; _localctx.baseType = name(0);
				}
			}

			State = 217;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 208; Match(Colon);
				State = 209; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 210; Match(Comma);
					State = 211; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken token;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			State = 233;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221; _localctx.token = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 222; _localctx.token = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 223; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 224; _localctx.token = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 225; _localctx.token = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 226; _localctx.token = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 227; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 228; _localctx.token = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 229; _localctx.token = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 230; _localctx.token = Match(Override);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 13);
				{
				State = 231; _localctx.token = Match(Async);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 14);
				{
				State = 232; _localctx.token = Match(Extern);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(LeftAngle);
			State = 236; typeParameter();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 237; Match(Comma);
				State = 238; typeParameter();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 244; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public ValueTypeContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; identifier();
			State = 248;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 247; _localctx.isList = Match(TypeList);
				}
			}

			State = 252;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 250; Match(Colon);
				State = 251; _localctx.baseType = valueType(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ReferenceTypeContext[] referenceType() {
			return GetRuleContexts<ReferenceTypeContext>();
		}
		public ReferenceTypeContext referenceType(int i) {
			return GetRuleContext<ReferenceTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(LeftAngle);
			State = 255; referenceType();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 256; Match(Comma);
				State = 257; referenceType();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 263; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(AdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(AdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(AdamantParser.FloatType, 0); }
		public ITerminalNode FixedType() { return GetToken(AdamantParser.FixedType, 0); }
		public ITerminalNode DecimalType() { return GetToken(AdamantParser.DecimalType, 0); }
		public ITerminalNode SizeType() { return GetToken(AdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(AdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(AdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifierOrPredefinedType);
		try {
			State = 276;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; identifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 269; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 270; _localctx.token = Match(FloatType);
				}
				break;
			case FixedType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 271; _localctx.token = Match(FixedType);
				}
				break;
			case DecimalType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 272; _localctx.token = Match(DecimalType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 273; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 10);
				{
				State = 274; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 11);
				{
				State = 275; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleName);
		try {
			State = 282;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; identifierOrPredefinedType();
				State = 280; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleNameNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public SimpleNameNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleNameNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 285; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 287;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 288; Match(Dot);
					State = 289; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : ValueTypeContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : ValueTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public FunctionTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : ValueTypeContext {
		public ValueTypeContext _valueType;
		public IList<ValueTypeContext> _types = new List<ValueTypeContext>();
		public ValueTypeContext[] valueType() {
			return GetRuleContexts<ValueTypeContext>();
		}
		public ValueTypeContext valueType(int i) {
			return GetRuleContext<ValueTypeContext>(i);
		}
		public TupleTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MaybeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public PointerTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueTypeContext _localctx = new ValueTypeContext(Context, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			switch (TokenStream.La(1)) {
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case FixedType:
			case DecimalType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 296; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 310;
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 297; Match(LeftBracket);
					State = 298; ((TupleTypeContext)_localctx)._valueType = valueType(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
					State = 303;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 299; Match(Comma);
						State = 300; ((TupleTypeContext)_localctx)._valueType = valueType(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
						}
						}
						State = 305;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 306; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 308; Match(LeftBracket);
					State = 309; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 312; funcTypeParameterList();
				State = 313; Match(Lambda);
				State = 314; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 322;
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new MaybeTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 318;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 319; Match(IsNull);
						}
						break;
					case 2:
						{
						_localctx = new PointerTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 320;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 321; Match(Asterisk);
						}
						break;
					}
					} 
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	 
		public ReferenceTypeContext() { }
		public virtual void CopyFrom(ReferenceTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OwnedImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedMutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedMutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_referenceType);
		try {
			State = 335;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new ImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; valueType(0);
				}
				break;
			case 2:
				_localctx = new MutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(Mutable);
				State = 329; valueType(0);
				}
				break;
			case 3:
				_localctx = new OwnedImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 330; Match(Own);
				State = 331; valueType(0);
				}
				break;
			case 4:
				_localctx = new OwnedMutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 332; Match(Own);
				State = 333; Match(Mutable);
				State = 334; valueType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 32, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 350;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; Match(LeftParen);
				State = 338; funcTypeParameter();
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 339; Match(Comma);
					State = 340; funcTypeParameter();
					}
					}
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 346; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; Match(LeftParen);
				State = 349; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 352; parameterModifier();
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 358; referenceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_constExpression);
		try {
			State = 363;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 362; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 381;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365; Match(Where);
				State = 366; typeParameter();
				State = 367; Match(Colon);
				State = 368; typeParameterConstraint();
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 369; Match(Comma);
					State = 370; typeParameterConstraint();
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376; Match(Where);
				State = 377; typeParameter();
				State = 378;
				_la = TokenStream.La(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LeftAngle - 81)) | (1L << (RightAngle - 81)) | (1L << (LessThanOrEqual - 81)) | (1L << (GreaterThanOrEqual - 81)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 379; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeParameterConstraint);
		try {
			State = 388;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 383; Match(New);
				State = 384; Match(LeftParen);
				State = 385; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; valueType(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 387; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ReferenceTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_member);
		int _la;
		try {
			int _alt;
			State = 567;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 390; attribute();
					}
					}
					State = 395;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 396; modifier();
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 402; Match(New);
				State = 404;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 403; identifier();
					}
				}

				State = 406; parameterList();
				State = 409;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 407; Match(Lambda);
					State = 408; ((ConstructorContext)_localctx).returnType = referenceType();
					}
				}

				State = 412;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 411; constructorInitializer();
					}
				}

				State = 414; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 416; attribute();
					}
					}
					State = 421;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 422; modifier();
					}
					}
					State = 427;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 428; Match(Delete);
				State = 429; parameterList();
				State = 430; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 432; attribute();
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 438; modifier();
					}
					}
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 444; Match(Conversion);
				State = 446;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 445; typeArguments();
					}
				}

				State = 448; parameterList();
				State = 449; Match(Lambda);
				State = 450; referenceType();
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 451; typeParameterConstraintClause();
					}
					}
					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 457; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 459; attribute();
					}
					}
					State = 464;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 465; modifier();
					}
					}
					State = 470;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 471;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 472; identifier();
				State = 475;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 473; Match(Colon);
					State = 474; referenceType();
					}
				}

				State = 479;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 477; Match(Assign);
					State = 478; expression(0);
					}
				}

				State = 481; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 483; attribute();
					}
					}
					State = 488;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 489; modifier();
					}
					}
					State = 494;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 495;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 496; identifier();
				State = 498;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 497; typeArguments();
					}
				}

				State = 500; parameterList();
				State = 501; Match(Lambda);
				State = 502; referenceType();
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 503; typeParameterConstraintClause();
					}
					}
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 509; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 511; attribute();
					}
					}
					State = 516;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 517; modifier();
					}
					}
					State = 522;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 523;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 524; Match(LeftBracket);
				State = 525; Match(RightBracket);
				State = 527;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 526; typeArguments();
					}
				}

				State = 529; parameterList();
				State = 530; Match(Lambda);
				State = 531; referenceType();
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 532; typeParameterConstraintClause();
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 538; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 543;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 540; attribute();
						}
						} 
					}
					State = 545;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 546; modifier();
					}
					}
					State = 551;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 552; identifier();
				State = 554;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 553; typeArguments();
					}
				}

				State = 556; parameterList();
				State = 557; Match(Lambda);
				State = 558; ((MethodContext)_localctx).returnType = referenceType();
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 559; typeParameterConstraintClause();
					}
					}
					State = 564;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 565; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterList);
		int _la;
		try {
			State = 582;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569; Match(LeftParen);
				State = 570; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 571; Match(Comma);
					State = 572; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 577;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 578; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 580; Match(LeftParen);
				State = 581; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public IToken token;
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		int _la;
		try {
			State = 608;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 584; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 589;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 591;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 590; identifier();
					}
				}

				State = 593; Match(Colon);
				State = 594; referenceType();
				}
				break;
			case 2:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 595; ((SelfParameterContext)_localctx)._parameterModifier = parameterModifier();
					((SelfParameterContext)_localctx)._modifiers.Add(((SelfParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 600;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 602;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 601; Match(Own);
					}
				}

				State = 605;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 604; Match(Mutable);
					}
				}

				State = 607; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructorInitializer);
		try {
			State = 624;
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612; Match(Colon);
				State = 613; Match(Base);
				State = 614; Match(LeftParen);
				State = 615; argumentList();
				State = 616; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618; Match(Colon);
				State = 619; Match(Self);
				State = 620; Match(LeftParen);
				State = 621; argumentList();
				State = 622; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentList);
		int _la;
		try {
			State = 635;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 627; Match(Comma);
					State = 628; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 633;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 54, RULE_methodBody);
		int _la;
		try {
			State = 646;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637; Match(LeftBrace);
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Return) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (BooleanLiteral - 68)) | (1L << (IntLiteral - 68)) | (1L << (NullLiteral - 68)) | (1L << (StringLiteral - 68)) | (1L << (Semicolon - 68)) | (1L << (LeftBrace - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					{
					State = 638; statement();
					}
					}
					State = 643;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 644; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_overloadableOperator);
		try {
			State = 658;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 650; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 651; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 652; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 653; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 654; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 655; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 656; Match(LeftBracket);
				State = 657; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_statement);
		int _la;
		try {
			State = 728;
			switch (TokenStream.La(1)) {
			case Var:
			case Let:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 660; localVariableDeclaration();
				State = 661; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; Match(Unsafe);
				State = 664; Match(LeftBrace);
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Return) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (BooleanLiteral - 68)) | (1L << (IntLiteral - 68)) | (1L << (NullLiteral - 68)) | (1L << (StringLiteral - 68)) | (1L << (Semicolon - 68)) | (1L << (LeftBrace - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					{
					State = 665; statement();
					}
					}
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 671; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 672; Match(LeftBrace);
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Return) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (BooleanLiteral - 68)) | (1L << (IntLiteral - 68)) | (1L << (NullLiteral - 68)) | (1L << (StringLiteral - 68)) | (1L << (Semicolon - 68)) | (1L << (LeftBrace - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					{
					State = 673; statement();
					}
					}
					State = 678;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 679; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 680; Match(Semicolon);
				}
				break;
			case New:
			case Self:
			case Uninitialized:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 681; expression(0);
				State = 682; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 684; Match(Return);
				State = 685; expression(0);
				State = 686; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 688; Match(Throw);
				State = 689; expression(0);
				State = 690; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 692; Match(If);
				State = 693; Match(LeftParen);
				State = 694; ((IfStatementContext)_localctx).condition = expression(0);
				State = 695; Match(RightParen);
				State = 696; ((IfStatementContext)_localctx).then = statement();
				State = 699;
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 697; Match(Else);
					State = 698; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 701; Match(For);
				State = 702; Match(LeftParen);
				State = 704;
				_la = TokenStream.La(1);
				if (_la==Var || _la==Let) {
					{
					State = 703; localVariableDeclaration();
					}
				}

				State = 706; Match(Semicolon);
				State = 708;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (BooleanLiteral - 68)) | (1L << (IntLiteral - 68)) | (1L << (NullLiteral - 68)) | (1L << (StringLiteral - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					State = 707; expression(0);
					}
				}

				State = 710; Match(Semicolon);
				State = 712;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (BooleanLiteral - 68)) | (1L << (IntLiteral - 68)) | (1L << (NullLiteral - 68)) | (1L << (StringLiteral - 68)) | (1L << (Asterisk - 68)) | (1L << (AddressOf - 68)) | (1L << (Plus - 68)) | (1L << (Minus - 68)) | (1L << (Not - 68)) | (1L << (Identifier - 68)) | (1L << (EscapedIdentifier - 68)))) != 0)) {
					{
					State = 711; expression(0);
					}
				}

				State = 714; Match(RightParen);
				State = 715; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 716; Match(Foreach);
				State = 717; Match(LeftParen);
				State = 718; localVariableDeclaration();
				State = 719; Match(In);
				State = 720; expression(0);
				State = 721; Match(RightParen);
				State = 722; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 724; Match(Delete);
				State = 725; expression(0);
				State = 726; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 731; identifier();
			State = 734;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 732; Match(Colon);
				State = 733; referenceType();
				}
			}

			State = 738;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 736; Match(Assign);
				State = 737; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 741;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (Asterisk - 87)) | (1L << (AddressOf - 87)) | (1L << (Plus - 87)) | (1L << (Minus - 87)) | (1L << (Not - 87)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 742; expression(20);
				}
				break;
			case 2:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 743; identifier();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 744; Match(New);
				State = 745; name(0);
				State = 746; Match(LeftParen);
				State = 747; argumentList();
				State = 748; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 750; Match(New);
				State = 752;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 751; baseTypes();
					}
				}

				State = 754; Match(LeftParen);
				State = 755; argumentList();
				State = 756; Match(RightParen);
				State = 757; Match(LeftBrace);
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 758; member();
					}
					}
					State = 763;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 764; Match(RightBrace);
				}
				break;
			case 5:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 766; Match(NullLiteral);
				}
				break;
			case 6:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 767; Match(Self);
				}
				break;
			case 7:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 768; Match(BooleanLiteral);
				}
				break;
			case 8:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 769; Match(IntLiteral);
				}
				break;
			case 9:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 770; Match(Uninitialized);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 771; Match(StringLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 827;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 825;
					switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 775;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 776; expression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 778;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 779; expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 780;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 781;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LeftAngle - 81)) | (1L << (RightAngle - 81)) | (1L << (LessThanOrEqual - 81)) | (1L << (GreaterThanOrEqual - 81)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 782; expression(18);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 783;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 784;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 785; ((EqualityExpressionContext)_localctx).rhs = expression(17);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 786;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 787; Match(And);
						State = 788; expression(16);
						}
						break;
					case 6:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 789;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 790; Match(Xor);
						State = 791; expression(15);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 792;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 793; Match(Or);
						State = 794; expression(14);
						}
						break;
					case 8:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 795;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 796; Match(Coalesce);
						State = 797; expression(13);
						}
						break;
					case 9:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 798;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 799; Match(IsNull);
						State = 800; ((IfExpressionContext)_localctx).then = expression(0);
						State = 801; Match(Colon);
						State = 802; ((IfExpressionContext)_localctx).@else = expression(11);
						}
						break;
					case 10:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 804;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 805;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (Assign - 111)) | (1L << (AddAssign - 111)) | (1L << (SubtractAssign - 111)) | (1L << (MultiplyAssign - 111)) | (1L << (DivideAssign - 111)) | (1L << (AndAssign - 111)) | (1L << (XorAssign - 111)) | (1L << (OrAssign - 111)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 806; ((AssignmentExpressionContext)_localctx).rvalue = expression(10);
						}
						break;
					case 11:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 807;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 808; Match(Dot);
						State = 809; identifier();
						}
						break;
					case 12:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 810;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 811; Match(Lambda);
						State = 812; identifier();
						}
						break;
					case 13:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 813;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 814; Match(LeftParen);
						State = 815; argumentList();
						State = 816; Match(RightParen);
						}
						break;
					case 14:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 818;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 819; Match(LeftBracket);
						State = 820; argumentList();
						State = 821; Match(RightBracket);
						}
						break;
					case 15:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 823;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 824; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 829;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return name_sempred((NameContext)_localctx, predIndex);
		case 14: return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 14);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3{\x341\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\a\x2\x44\n\x2\f\x2\xE\x2G\v\x2\x3\x2\a\x2J\n\x2\f\x2\xE\x2M"+
		"\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4W\n\x4\x3\x5"+
		"\x3\x5\x3\x5\a\x5\\\n\x5\f\x5\xE\x5_\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		"\x65\n\x6\f\x6\xE\x6h\v\x6\x3\x6\a\x6k\n\x6\f\x6\xE\x6n\v\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6s\n\x6\f\x6\xE\x6v\v\x6\x3\x6\a\x6y\n\x6\f\x6\xE\x6|\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x5\x6\x81\n\x6\x3\x6\x5\x6\x84\n\x6\x3\x6\a\x6\x87"+
		"\n\x6\f\x6\xE\x6\x8A\v\x6\x3\x6\x3\x6\a\x6\x8E\n\x6\f\x6\xE\x6\x91\v\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\x96\n\x6\f\x6\xE\x6\x99\v\x6\x3\x6\a\x6\x9C\n"+
		"\x6\f\x6\xE\x6\x9F\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xA5\n\x6\x3\x6\x3"+
		"\x6\x5\x6\xA9\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xAE\n\x6\f\x6\xE\x6\xB1\v\x6"+
		"\x3\x6\a\x6\xB4\n\x6\f\x6\xE\x6\xB7\v\x6\x3\x6\x3\x6\x5\x6\xBB\n\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\a\x6\xC1\n\x6\f\x6\xE\x6\xC4\v\x6\x3\x6\x3\x6\x5"+
		"\x6\xC8\n\x6\x3\a\x3\a\x3\a\x5\a\xCD\n\a\x3\b\x3\b\x5\b\xD1\n\b\x3\b\x3"+
		"\b\x3\b\x3\b\a\b\xD7\n\b\f\b\xE\b\xDA\v\b\x5\b\xDC\n\b\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xEC\n\t\x3"+
		"\n\x3\n\x3\n\x3\n\a\n\xF2\n\n\f\n\xE\n\xF5\v\n\x3\n\x3\n\x3\v\x3\v\x5"+
		"\v\xFB\n\v\x3\v\x3\v\x5\v\xFF\n\v\x3\f\x3\f\x3\f\x3\f\a\f\x105\n\f\f\f"+
		"\xE\f\x108\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x5\r\x117\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x11D\n\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x125\n\xF\f\xF\xE\xF\x128\v\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x130\n\x10\f\x10\xE\x10"+
		"\x133\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x139\n\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x13F\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x145"+
		"\n\x10\f\x10\xE\x10\x148\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\x152\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x158"+
		"\n\x12\f\x12\xE\x12\x15B\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x161"+
		"\n\x12\x3\x13\a\x13\x164\n\x13\f\x13\xE\x13\x167\v\x13\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x14\x5\x14\x16E\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\a\x15\x176\n\x15\f\x15\xE\x15\x179\v\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\x180\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x187\n\x16\x3\x17\a\x17\x18A\n\x17\f\x17\xE\x17\x18D\v\x17\x3\x17"+
		"\a\x17\x190\n\x17\f\x17\xE\x17\x193\v\x17\x3\x17\x3\x17\x5\x17\x197\n"+
		"\x17\x3\x17\x3\x17\x3\x17\x5\x17\x19C\n\x17\x3\x17\x5\x17\x19F\n\x17\x3"+
		"\x17\x3\x17\x3\x17\a\x17\x1A4\n\x17\f\x17\xE\x17\x1A7\v\x17\x3\x17\a\x17"+
		"\x1AA\n\x17\f\x17\xE\x17\x1AD\v\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\a\x17\x1B4\n\x17\f\x17\xE\x17\x1B7\v\x17\x3\x17\a\x17\x1BA\n\x17\f\x17"+
		"\xE\x17\x1BD\v\x17\x3\x17\x3\x17\x5\x17\x1C1\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\a\x17\x1C7\n\x17\f\x17\xE\x17\x1CA\v\x17\x3\x17\x3\x17\x3\x17"+
		"\a\x17\x1CF\n\x17\f\x17\xE\x17\x1D2\v\x17\x3\x17\a\x17\x1D5\n\x17\f\x17"+
		"\xE\x17\x1D8\v\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x1DE\n\x17\x3\x17"+
		"\x3\x17\x5\x17\x1E2\n\x17\x3\x17\x3\x17\x3\x17\a\x17\x1E7\n\x17\f\x17"+
		"\xE\x17\x1EA\v\x17\x3\x17\a\x17\x1ED\n\x17\f\x17\xE\x17\x1F0\v\x17\x3"+
		"\x17\x3\x17\x3\x17\x5\x17\x1F5\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17"+
		"\x1FB\n\x17\f\x17\xE\x17\x1FE\v\x17\x3\x17\x3\x17\x3\x17\a\x17\x203\n"+
		"\x17\f\x17\xE\x17\x206\v\x17\x3\x17\a\x17\x209\n\x17\f\x17\xE\x17\x20C"+
		"\v\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x212\n\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\a\x17\x218\n\x17\f\x17\xE\x17\x21B\v\x17\x3\x17\x3\x17\x3"+
		"\x17\a\x17\x220\n\x17\f\x17\xE\x17\x223\v\x17\x3\x17\a\x17\x226\n\x17"+
		"\f\x17\xE\x17\x229\v\x17\x3\x17\x3\x17\x5\x17\x22D\n\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\a\x17\x233\n\x17\f\x17\xE\x17\x236\v\x17\x3\x17\x3\x17"+
		"\x5\x17\x23A\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x240\n\x18\f\x18"+
		"\xE\x18\x243\v\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x249\n\x18\x3\x19"+
		"\a\x19\x24C\n\x19\f\x19\xE\x19\x24F\v\x19\x3\x19\x5\x19\x252\n\x19\x3"+
		"\x19\x3\x19\x3\x19\a\x19\x257\n\x19\f\x19\xE\x19\x25A\v\x19\x3\x19\x5"+
		"\x19\x25D\n\x19\x3\x19\x5\x19\x260\n\x19\x3\x19\x5\x19\x263\n\x19\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x273\n\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x278"+
		"\n\x1C\f\x1C\xE\x1C\x27B\v\x1C\x3\x1C\x5\x1C\x27E\n\x1C\x3\x1D\x3\x1D"+
		"\a\x1D\x282\n\x1D\f\x1D\xE\x1D\x285\v\x1D\x3\x1D\x3\x1D\x5\x1D\x289\n"+
		"\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x295\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F"+
		"\x29D\n\x1F\f\x1F\xE\x1F\x2A0\v\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x2A5\n"+
		"\x1F\f\x1F\xE\x1F\x2A8\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2BE\n\x1F\x3\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x2C3\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2C7\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2CB"+
		"\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2DB\n\x1F\x3 \x3 \x3 \x3 "+
		"\x5 \x2E1\n \x3 \x3 \x5 \x2E5\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x5!\x2F3\n!\x3!\x3!\x3!\x3!\x3!\a!\x2FA\n!\f!\xE!\x2FD\v!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x307\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\a!\x33C\n!\f!\xE!\x33F\v!\x3!\x2"+
		"\x5\x1C\x1E@\"\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&"+
		"(*,.\x30\x32\x34\x36\x38:<>@\x2\n\x3\x2\x14\x15\x4\x2ST`\x61\x3\x2\x16"+
		"\x17\x6\x2YY[[\x63\x64jj\x4\x2YY\x65\x65\x3\x2\x63\x64\x3\x2^_\x3\x2q"+
		"x\x3CC\x2\x45\x3\x2\x2\x2\x4P\x3\x2\x2\x2\x6V\x3\x2\x2\x2\bX\x3\x2\x2"+
		"\x2\n\xC7\x3\x2\x2\x2\f\xC9\x3\x2\x2\x2\xE\xCE\x3\x2\x2\x2\x10\xEB\x3"+
		"\x2\x2\x2\x12\xED\x3\x2\x2\x2\x14\xF8\x3\x2\x2\x2\x16\x100\x3\x2\x2\x2"+
		"\x18\x116\x3\x2\x2\x2\x1A\x11C\x3\x2\x2\x2\x1C\x11E\x3\x2\x2\x2\x1E\x13E"+
		"\x3\x2\x2\x2 \x151\x3\x2\x2\x2\"\x160\x3\x2\x2\x2$\x165\x3\x2\x2\x2&\x16D"+
		"\x3\x2\x2\x2(\x17F\x3\x2\x2\x2*\x186\x3\x2\x2\x2,\x239\x3\x2\x2\x2.\x248"+
		"\x3\x2\x2\x2\x30\x262\x3\x2\x2\x2\x32\x264\x3\x2\x2\x2\x34\x272\x3\x2"+
		"\x2\x2\x36\x27D\x3\x2\x2\x2\x38\x288\x3\x2\x2\x2:\x294\x3\x2\x2\x2<\x2DA"+
		"\x3\x2\x2\x2>\x2DC\x3\x2\x2\x2@\x306\x3\x2\x2\x2\x42\x44\x5\x4\x3\x2\x43"+
		"\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2"+
		"\x2\x46K\x3\x2\x2\x2G\x45\x3\x2\x2\x2HJ\x5\n\x6\x2IH\x3\x2\x2\x2JM\x3"+
		"\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2LN\x3\x2\x2\x2MK\x3\x2\x2\x2NO\a"+
		"\x2\x2\x3O\x3\x3\x2\x2\x2PQ\a\n\x2\x2QR\x5\b\x5\x2RS\aJ\x2\x2S\x5\x3\x2"+
		"\x2\x2TW\ay\x2\x2UW\az\x2\x2VT\x3\x2\x2\x2VU\x3\x2\x2\x2W\a\x3\x2\x2\x2"+
		"X]\x5\x6\x4\x2YZ\aL\x2\x2Z\\\x5\x6\x4\x2[Y\x3\x2\x2\x2\\_\x3\x2\x2\x2"+
		"][\x3\x2\x2\x2]^\x3\x2\x2\x2^\t\x3\x2\x2\x2_]\x3\x2\x2\x2`\x61\a\v\x2"+
		"\x2\x61\x62\x5\b\x5\x2\x62\x66\aQ\x2\x2\x63\x65\x5\x4\x3\x2\x64\x63\x3"+
		"\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gl\x3\x2"+
		"\x2\x2h\x66\x3\x2\x2\x2ik\x5\n\x6\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3"+
		"\x2\x2\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2nl\x3\x2\x2\x2op\aR\x2\x2p\xC8\x3"+
		"\x2\x2\x2qs\x5\f\a\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2"+
		"\x2\x2uz\x3\x2\x2\x2vt\x3\x2\x2\x2wy\x5\x10\t\x2xw\x3\x2\x2\x2y|\x3\x2"+
		"\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}~\a\f\x2"+
		"\x2~\x80\x5\x6\x4\x2\x7F\x81\x5\x12\n\x2\x80\x7F\x3\x2\x2\x2\x80\x81\x3"+
		"\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x84\x5\xE\b\x2\x83\x82\x3\x2\x2\x2\x83"+
		"\x84\x3\x2\x2\x2\x84\x88\x3\x2\x2\x2\x85\x87\x5(\x15\x2\x86\x85\x3\x2"+
		"\x2\x2\x87\x8A\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89"+
		"\x8B\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8B\x8F\aQ\x2\x2\x8C\x8E\x5,\x17"+
		"\x2\x8D\x8C\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90"+
		"\x3\x2\x2\x2\x90\x92\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x93\aR\x2\x2"+
		"\x93\xC8\x3\x2\x2\x2\x94\x96\x5\f\a\x2\x95\x94\x3\x2\x2\x2\x96\x99\x3"+
		"\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9D\x3\x2\x2\x2"+
		"\x99\x97\x3\x2\x2\x2\x9A\x9C\x5\x10\t\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9F\x3"+
		"\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA0\x3\x2\x2\x2"+
		"\x9F\x9D\x3\x2\x2\x2\xA0\xA1\t\x2\x2\x2\xA1\xA4\x5\x6\x4\x2\xA2\xA3\a"+
		"K\x2\x2\xA3\xA5\x5 \x11\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5"+
		"\xA8\x3\x2\x2\x2\xA6\xA7\aq\x2\x2\xA7\xA9\x5@!\x2\xA8\xA6\x3\x2\x2\x2"+
		"\xA8\xA9\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB\aJ\x2\x2\xAB\xC8\x3\x2"+
		"\x2\x2\xAC\xAE\x5\f\a\x2\xAD\xAC\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD"+
		"\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB5\x3\x2\x2\x2\xB1\xAF\x3\x2\x2"+
		"\x2\xB2\xB4\x5\x10\t\x2\xB3\xB2\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3"+
		"\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3\x2\x2"+
		"\x2\xB8\xBA\x5\x6\x4\x2\xB9\xBB\x5\x16\f\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB"+
		"\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x5.\x18\x2\xBD\xBE\aP\x2\x2\xBE"+
		"\xC2\x5 \x11\x2\xBF\xC1\x5(\x15\x2\xC0\xBF\x3\x2\x2\x2\xC1\xC4\x3\x2\x2"+
		"\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC5\x3\x2\x2\x2\xC4\xC2"+
		"\x3\x2\x2\x2\xC5\xC6\x5\x38\x1D\x2\xC6\xC8\x3\x2\x2\x2\xC7`\x3\x2\x2\x2"+
		"\xC7t\x3\x2\x2\x2\xC7\x97\x3\x2\x2\x2\xC7\xAF\x3\x2\x2\x2\xC8\v\x3\x2"+
		"\x2\x2\xC9\xCC\az\x2\x2\xCA\xCB\aW\x2\x2\xCB\xCD\aX\x2\x2\xCC\xCA\x3\x2"+
		"\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\r\x3\x2\x2\x2\xCE\xD0\aK\x2\x2\xCF\xD1"+
		"\x5\x1C\xF\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xDB\x3\x2\x2"+
		"\x2\xD2\xD3\aK\x2\x2\xD3\xD8\x5\x1C\xF\x2\xD4\xD5\aO\x2\x2\xD5\xD7\x5"+
		"\x1C\xF\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2"+
		"\xD8\xD9\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xD2\x3"+
		"\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xF\x3\x2\x2\x2\xDD\xEC\a\x31\x2\x2\xDE"+
		"\xEC\a\x32\x2\x2\xDF\xEC\a\x33\x2\x2\xE0\xEC\a\x34\x2\x2\xE1\xEC\a\x35"+
		"\x2\x2\xE2\xEC\a\x36\x2\x2\xE3\xEC\a\x1B\x2\x2\xE4\xEC\a\x1A\x2\x2\xE5"+
		"\xEC\a.\x2\x2\xE6\xEC\a/\x2\x2\xE7\xEC\a\x18\x2\x2\xE8\xEC\a\x19\x2\x2"+
		"\xE9\xEC\a:\x2\x2\xEA\xEC\a\x1D\x2\x2\xEB\xDD\x3\x2\x2\x2\xEB\xDE\x3\x2"+
		"\x2\x2\xEB\xDF\x3\x2\x2\x2\xEB\xE0\x3\x2\x2\x2\xEB\xE1\x3\x2\x2\x2\xEB"+
		"\xE2\x3\x2\x2\x2\xEB\xE3\x3\x2\x2\x2\xEB\xE4\x3\x2\x2\x2\xEB\xE5\x3\x2"+
		"\x2\x2\xEB\xE6\x3\x2\x2\x2\xEB\xE7\x3\x2\x2\x2\xEB\xE8\x3\x2\x2\x2\xEB"+
		"\xE9\x3\x2\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\x11\x3\x2\x2\x2\xED\xEE\aS\x2"+
		"\x2\xEE\xF3\x5\x14\v\x2\xEF\xF0\aO\x2\x2\xF0\xF2\x5\x14\v\x2\xF1\xEF\x3"+
		"\x2\x2\x2\xF2\xF5\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2"+
		"\xF4\xF6\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF7\aT\x2\x2\xF7\x13\x3\x2"+
		"\x2\x2\xF8\xFA\x5\x6\x4\x2\xF9\xFB\a\x62\x2\x2\xFA\xF9\x3\x2\x2\x2\xFA"+
		"\xFB\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC\xFD\aK\x2\x2\xFD\xFF\x5\x1E\x10"+
		"\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x15\x3\x2\x2\x2\x100\x101"+
		"\aS\x2\x2\x101\x106\x5 \x11\x2\x102\x103\aO\x2\x2\x103\x105\x5 \x11\x2"+
		"\x104\x102\x3\x2\x2\x2\x105\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106"+
		"\x107\x3\x2\x2\x2\x107\x109\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A"+
		"\aT\x2\x2\x10A\x17\x3\x2\x2\x2\x10B\x117\x5\x6\x4\x2\x10C\x117\a<\x2\x2"+
		"\x10D\x117\a=\x2\x2\x10E\x117\a>\x2\x2\x10F\x117\a?\x2\x2\x110\x117\a"+
		"@\x2\x2\x111\x117\a\x41\x2\x2\x112\x117\a\x42\x2\x2\x113\x117\a\x43\x2"+
		"\x2\x114\x117\a\x44\x2\x2\x115\x117\a\x45\x2\x2\x116\x10B\x3\x2\x2\x2"+
		"\x116\x10C\x3\x2\x2\x2\x116\x10D\x3\x2\x2\x2\x116\x10E\x3\x2\x2\x2\x116"+
		"\x10F\x3\x2\x2\x2\x116\x110\x3\x2\x2\x2\x116\x111\x3\x2\x2\x2\x116\x112"+
		"\x3\x2\x2\x2\x116\x113\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116\x115\x3"+
		"\x2\x2\x2\x117\x19\x3\x2\x2\x2\x118\x11D\x5\x18\r\x2\x119\x11A\x5\x18"+
		"\r\x2\x11A\x11B\x5\x16\f\x2\x11B\x11D\x3\x2\x2\x2\x11C\x118\x3\x2\x2\x2"+
		"\x11C\x119\x3\x2\x2\x2\x11D\x1B\x3\x2\x2\x2\x11E\x11F\b\xF\x1\x2\x11F"+
		"\x120\x5\x1A\xE\x2\x120\x126\x3\x2\x2\x2\x121\x122\f\x3\x2\x2\x122\x123"+
		"\aL\x2\x2\x123\x125\x5\x1A\xE\x2\x124\x121\x3\x2\x2\x2\x125\x128\x3\x2"+
		"\x2\x2\x126\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x1D\x3\x2\x2\x2"+
		"\x128\x126\x3\x2\x2\x2\x129\x12A\b\x10\x1\x2\x12A\x13F\x5\x1C\xF\x2\x12B"+
		"\x12C\aU\x2\x2\x12C\x131\x5\x1E\x10\x2\x12D\x12E\aO\x2\x2\x12E\x130\x5"+
		"\x1E\x10\x2\x12F\x12D\x3\x2\x2\x2\x130\x133\x3\x2\x2\x2\x131\x12F\x3\x2"+
		"\x2\x2\x131\x132\x3\x2\x2\x2\x132\x134\x3\x2\x2\x2\x133\x131\x3\x2\x2"+
		"\x2\x134\x135\aV\x2\x2\x135\x139\x3\x2\x2\x2\x136\x137\aU\x2\x2\x137\x139"+
		"\aV\x2\x2\x138\x12B\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x139\x13F\x3\x2"+
		"\x2\x2\x13A\x13B\x5\"\x12\x2\x13B\x13C\aP\x2\x2\x13C\x13D\x5 \x11\x2\x13D"+
		"\x13F\x3\x2\x2\x2\x13E\x129\x3\x2\x2\x2\x13E\x138\x3\x2\x2\x2\x13E\x13A"+
		"\x3\x2\x2\x2\x13F\x146\x3\x2\x2\x2\x140\x141\f\x6\x2\x2\x141\x145\a]\x2"+
		"\x2\x142\x143\f\x5\x2\x2\x143\x145\aY\x2\x2\x144\x140\x3\x2\x2\x2\x144"+
		"\x142\x3\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x146\x147"+
		"\x3\x2\x2\x2\x147\x1F\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x149\x152\x5\x1E"+
		"\x10\x2\x14A\x14B\a\x38\x2\x2\x14B\x152\x5\x1E\x10\x2\x14C\x14D\a\x37"+
		"\x2\x2\x14D\x152\x5\x1E\x10\x2\x14E\x14F\a\x37\x2\x2\x14F\x150\a\x38\x2"+
		"\x2\x150\x152\x5\x1E\x10\x2\x151\x149\x3\x2\x2\x2\x151\x14A\x3\x2\x2\x2"+
		"\x151\x14C\x3\x2\x2\x2\x151\x14E\x3\x2\x2\x2\x152!\x3\x2\x2\x2\x153\x154"+
		"\aW\x2\x2\x154\x159\x5$\x13\x2\x155\x156\aO\x2\x2\x156\x158\x5$\x13\x2"+
		"\x157\x155\x3\x2\x2\x2\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159"+
		"\x15A\x3\x2\x2\x2\x15A\x15C\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x15D"+
		"\aX\x2\x2\x15D\x161\x3\x2\x2\x2\x15E\x15F\aW\x2\x2\x15F\x161\aX\x2\x2"+
		"\x160\x153\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x161#\x3\x2\x2\x2\x162\x164"+
		"\x5\x32\x1A\x2\x163\x162\x3\x2\x2\x2\x164\x167\x3\x2\x2\x2\x165\x163\x3"+
		"\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x168\x3\x2\x2\x2\x167\x165\x3\x2"+
		"\x2\x2\x168\x169\x5 \x11\x2\x169%\x3\x2\x2\x2\x16A\x16E\aG\x2\x2\x16B"+
		"\x16E\aI\x2\x2\x16C\x16E\x5\x6\x4\x2\x16D\x16A\x3\x2\x2\x2\x16D\x16B\x3"+
		"\x2\x2\x2\x16D\x16C\x3\x2\x2\x2\x16E\'\x3\x2\x2\x2\x16F\x170\a\x12\x2"+
		"\x2\x170\x171\x5\x14\v\x2\x171\x172\aK\x2\x2\x172\x177\x5*\x16\x2\x173"+
		"\x174\aO\x2\x2\x174\x176\x5*\x16\x2\x175\x173\x3\x2\x2\x2\x176\x179\x3"+
		"\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x180\x3\x2"+
		"\x2\x2\x179\x177\x3\x2\x2\x2\x17A\x17B\a\x12\x2\x2\x17B\x17C\x5\x14\v"+
		"\x2\x17C\x17D\t\x3\x2\x2\x17D\x17E\aG\x2\x2\x17E\x180\x3\x2\x2\x2\x17F"+
		"\x16F\x3\x2\x2\x2\x17F\x17A\x3\x2\x2\x2\x180)\x3\x2\x2\x2\x181\x182\a"+
		"\xE\x2\x2\x182\x183\aW\x2\x2\x183\x187\aX\x2\x2\x184\x187\x5\x1E\x10\x2"+
		"\x185\x187\x5\x14\v\x2\x186\x181\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x186"+
		"\x185\x3\x2\x2\x2\x187+\x3\x2\x2\x2\x188\x18A\x5\f\a\x2\x189\x188\x3\x2"+
		"\x2\x2\x18A\x18D\x3\x2\x2\x2\x18B\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2"+
		"\x2\x18C\x191\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18E\x190\x5\x10\t\x2"+
		"\x18F\x18E\x3\x2\x2\x2\x190\x193\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x191"+
		"\x192\x3\x2\x2\x2\x192\x194\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194\x196"+
		"\a\xE\x2\x2\x195\x197\x5\x6\x4\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2"+
		"\x2\x2\x197\x198\x3\x2\x2\x2\x198\x19B\x5.\x18\x2\x199\x19A\aP\x2\x2\x19A"+
		"\x19C\x5 \x11\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x19E"+
		"\x3\x2\x2\x2\x19D\x19F\x5\x34\x1B\x2\x19E\x19D\x3\x2\x2\x2\x19E\x19F\x3"+
		"\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A1\x5\x38\x1D\x2\x1A1\x23A\x3\x2"+
		"\x2\x2\x1A2\x1A4\x5\f\a\x2\x1A3\x1A2\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2"+
		"\x1A5\x1A3\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1AB\x3\x2\x2\x2\x1A7"+
		"\x1A5\x3\x2\x2\x2\x1A8\x1AA\x5\x10\t\x2\x1A9\x1A8\x3\x2\x2\x2\x1AA\x1AD"+
		"\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AE\x3"+
		"\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AE\x1AF\a\xF\x2\x2\x1AF\x1B0\x5.\x18"+
		"\x2\x1B0\x1B1\x5\x38\x1D\x2\x1B1\x23A\x3\x2\x2\x2\x1B2\x1B4\x5\f\a\x2"+
		"\x1B3\x1B2\x3\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5"+
		"\x1B6\x3\x2\x2\x2\x1B6\x1BB\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1BA"+
		"\x5\x10\t\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9\x3"+
		"\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x1BB\x3\x2"+
		"\x2\x2\x1BE\x1C0\a\x30\x2\x2\x1BF\x1C1\x5\x16\f\x2\x1C0\x1BF\x3\x2\x2"+
		"\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C3\x5.\x18\x2\x1C3"+
		"\x1C4\aP\x2\x2\x1C4\x1C8\x5 \x11\x2\x1C5\x1C7\x5(\x15\x2\x1C6\x1C5\x3"+
		"\x2\x2\x2\x1C7\x1CA\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2"+
		"\x2\x2\x1C9\x1CB\x3\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CB\x1CC\x5\x38\x1D"+
		"\x2\x1CC\x23A\x3\x2\x2\x2\x1CD\x1CF\x5\f\a\x2\x1CE\x1CD\x3\x2\x2\x2\x1CF"+
		"\x1D2\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D6"+
		"\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D5\x5\x10\t\x2\x1D4\x1D3\x3"+
		"\x2\x2\x2\x1D5\x1D8\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2"+
		"\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9\x1DA\t\x2\x2\x2"+
		"\x1DA\x1DD\x5\x6\x4\x2\x1DB\x1DC\aK\x2\x2\x1DC\x1DE\x5 \x11\x2\x1DD\x1DB"+
		"\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2\x1DF\x1E0\aq"+
		"\x2\x2\x1E0\x1E2\x5@!\x2\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2"+
		"\x1E3\x3\x2\x2\x2\x1E3\x1E4\aJ\x2\x2\x1E4\x23A\x3\x2\x2\x2\x1E5\x1E7\x5"+
		"\f\a\x2\x1E6\x1E5\x3\x2\x2\x2\x1E7\x1EA\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2"+
		"\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EE\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2"+
		"\x1EB\x1ED\x5\x10\t\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2\x2\x1EE"+
		"\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1EE"+
		"\x3\x2\x2\x2\x1F1\x1F2\t\x4\x2\x2\x1F2\x1F4\x5\x6\x4\x2\x1F3\x1F5\x5\x16"+
		"\f\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2"+
		"\x1F6\x1F7\x5.\x18\x2\x1F7\x1F8\aP\x2\x2\x1F8\x1FC\x5 \x11\x2\x1F9\x1FB"+
		"\x5(\x15\x2\x1FA\x1F9\x3\x2\x2\x2\x1FB\x1FE\x3\x2\x2\x2\x1FC\x1FA\x3\x2"+
		"\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2"+
		"\x2\x1FF\x200\x5\x38\x1D\x2\x200\x23A\x3\x2\x2\x2\x201\x203\x5\f\a\x2"+
		"\x202\x201\x3\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2\x204"+
		"\x205\x3\x2\x2\x2\x205\x20A\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x207\x209"+
		"\x5\x10\t\x2\x208\x207\x3\x2\x2\x2\x209\x20C\x3\x2\x2\x2\x20A\x208\x3"+
		"\x2\x2\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20D\x3\x2\x2\x2\x20C\x20A\x3\x2"+
		"\x2\x2\x20D\x20E\t\x4\x2\x2\x20E\x20F\aU\x2\x2\x20F\x211\aV\x2\x2\x210"+
		"\x212\x5\x16\f\x2\x211\x210\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x213"+
		"\x3\x2\x2\x2\x213\x214\x5.\x18\x2\x214\x215\aP\x2\x2\x215\x219\x5 \x11"+
		"\x2\x216\x218\x5(\x15\x2\x217\x216\x3\x2\x2\x2\x218\x21B\x3\x2\x2\x2\x219"+
		"\x217\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x21C\x3\x2\x2\x2\x21B\x219"+
		"\x3\x2\x2\x2\x21C\x21D\x5\x38\x1D\x2\x21D\x23A\x3\x2\x2\x2\x21E\x220\x5"+
		"\f\a\x2\x21F\x21E\x3\x2\x2\x2\x220\x223\x3\x2\x2\x2\x221\x21F\x3\x2\x2"+
		"\x2\x221\x222\x3\x2\x2\x2\x222\x227\x3\x2\x2\x2\x223\x221\x3\x2\x2\x2"+
		"\x224\x226\x5\x10\t\x2\x225\x224\x3\x2\x2\x2\x226\x229\x3\x2\x2\x2\x227"+
		"\x225\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x22A\x3\x2\x2\x2\x229\x227"+
		"\x3\x2\x2\x2\x22A\x22C\x5\x6\x4\x2\x22B\x22D\x5\x16\f\x2\x22C\x22B\x3"+
		"\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x22F\x5.\x18"+
		"\x2\x22F\x230\aP\x2\x2\x230\x234\x5 \x11\x2\x231\x233\x5(\x15\x2\x232"+
		"\x231\x3\x2\x2\x2\x233\x236\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x234\x235"+
		"\x3\x2\x2\x2\x235\x237\x3\x2\x2\x2\x236\x234\x3\x2\x2\x2\x237\x238\x5"+
		"\x38\x1D\x2\x238\x23A\x3\x2\x2\x2\x239\x18B\x3\x2\x2\x2\x239\x1A5\x3\x2"+
		"\x2\x2\x239\x1B5\x3\x2\x2\x2\x239\x1D0\x3\x2\x2\x2\x239\x1E8\x3\x2\x2"+
		"\x2\x239\x204\x3\x2\x2\x2\x239\x221\x3\x2\x2\x2\x23A-\x3\x2\x2\x2\x23B"+
		"\x23C\aW\x2\x2\x23C\x241\x5\x30\x19\x2\x23D\x23E\aO\x2\x2\x23E\x240\x5"+
		"\x30\x19\x2\x23F\x23D\x3\x2\x2\x2\x240\x243\x3\x2\x2\x2\x241\x23F\x3\x2"+
		"\x2\x2\x241\x242\x3\x2\x2\x2\x242\x244\x3\x2\x2\x2\x243\x241\x3\x2\x2"+
		"\x2\x244\x245\aX\x2\x2\x245\x249\x3\x2\x2\x2\x246\x247\aW\x2\x2\x247\x249"+
		"\aX\x2\x2\x248\x23B\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x249/\x3\x2\x2\x2"+
		"\x24A\x24C\x5\x32\x1A\x2\x24B\x24A\x3\x2\x2\x2\x24C\x24F\x3\x2\x2\x2\x24D"+
		"\x24B\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x251\x3\x2\x2\x2\x24F\x24D"+
		"\x3\x2\x2\x2\x250\x252\x5\x6\x4\x2\x251\x250\x3\x2\x2\x2\x251\x252\x3"+
		"\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x254\aK\x2\x2\x254\x263\x5 \x11\x2"+
		"\x255\x257\x5\x32\x1A\x2\x256\x255\x3\x2\x2\x2\x257\x25A\x3\x2\x2\x2\x258"+
		"\x256\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25C\x3\x2\x2\x2\x25A\x258"+
		"\x3\x2\x2\x2\x25B\x25D\a\x37\x2\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D\x3"+
		"\x2\x2\x2\x25D\x25F\x3\x2\x2\x2\x25E\x260\a\x38\x2\x2\x25F\x25E\x3\x2"+
		"\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x263\a\x10\x2"+
		"\x2\x262\x24D\x3\x2\x2\x2\x262\x258\x3\x2\x2\x2\x263\x31\x3\x2\x2\x2\x264"+
		"\x265\a\x1C\x2\x2\x265\x33\x3\x2\x2\x2\x266\x267\aK\x2\x2\x267\x268\a"+
		"\x13\x2\x2\x268\x269\aW\x2\x2\x269\x26A\x5\x36\x1C\x2\x26A\x26B\aX\x2"+
		"\x2\x26B\x273\x3\x2\x2\x2\x26C\x26D\aK\x2\x2\x26D\x26E\a\x10\x2\x2\x26E"+
		"\x26F\aW\x2\x2\x26F\x270\x5\x36\x1C\x2\x270\x271\aX\x2\x2\x271\x273\x3"+
		"\x2\x2\x2\x272\x266\x3\x2\x2\x2\x272\x26C\x3\x2\x2\x2\x273\x35\x3\x2\x2"+
		"\x2\x274\x279\x5@!\x2\x275\x276\aO\x2\x2\x276\x278\x5@!\x2\x277\x275\x3"+
		"\x2\x2\x2\x278\x27B\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x279\x27A\x3\x2"+
		"\x2\x2\x27A\x27E\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27C\x27E\x3\x2\x2"+
		"\x2\x27D\x274\x3\x2\x2\x2\x27D\x27C\x3\x2\x2\x2\x27E\x37\x3\x2\x2\x2\x27F"+
		"\x283\aQ\x2\x2\x280\x282\x5<\x1F\x2\x281\x280\x3\x2\x2\x2\x282\x285\x3"+
		"\x2\x2\x2\x283\x281\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x286\x3\x2"+
		"\x2\x2\x285\x283\x3\x2\x2\x2\x286\x289\aR\x2\x2\x287\x289\aJ\x2\x2\x288"+
		"\x27F\x3\x2\x2\x2\x288\x287\x3\x2\x2\x2\x289\x39\x3\x2\x2\x2\x28A\x295"+
		"\aY\x2\x2\x28B\x295\a[\x2\x2\x28C\x295\ai\x2\x2\x28D\x295\ag\x2\x2\x28E"+
		"\x295\ah\x2\x2\x28F\x295\a]\x2\x2\x290\x295\a\\\x2\x2\x291\x295\aL\x2"+
		"\x2\x292\x293\aU\x2\x2\x293\x295\aV\x2\x2\x294\x28A\x3\x2\x2\x2\x294\x28B"+
		"\x3\x2\x2\x2\x294\x28C\x3\x2\x2\x2\x294\x28D\x3\x2\x2\x2\x294\x28E\x3"+
		"\x2\x2\x2\x294\x28F\x3\x2\x2\x2\x294\x290\x3\x2\x2\x2\x294\x291\x3\x2"+
		"\x2\x2\x294\x292\x3\x2\x2\x2\x295;\x3\x2\x2\x2\x296\x297\x5> \x2\x297"+
		"\x298\aJ\x2\x2\x298\x2DB\x3\x2\x2\x2\x299\x29A\a\x36\x2\x2\x29A\x29E\a"+
		"Q\x2\x2\x29B\x29D\x5<\x1F\x2\x29C\x29B\x3\x2\x2\x2\x29D\x2A0\x3\x2\x2"+
		"\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1\x3\x2\x2\x2"+
		"\x2A0\x29E\x3\x2\x2\x2\x2A1\x2DB\aR\x2\x2\x2A2\x2A6\aQ\x2\x2\x2A3\x2A5"+
		"\x5<\x1F\x2\x2A4\x2A3\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2\x2\x2A6\x2A4\x3\x2"+
		"\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A9\x3\x2\x2\x2\x2A8\x2A6\x3\x2\x2"+
		"\x2\x2A9\x2DB\aR\x2\x2\x2AA\x2DB\aJ\x2\x2\x2AB\x2AC\x5@!\x2\x2AC\x2AD"+
		"\aJ\x2\x2\x2AD\x2DB\x3\x2\x2\x2\x2AE\x2AF\a)\x2\x2\x2AF\x2B0\x5@!\x2\x2B0"+
		"\x2B1\aJ\x2\x2\x2B1\x2DB\x3\x2\x2\x2\x2B2\x2B3\a-\x2\x2\x2B3\x2B4\x5@"+
		"!\x2\x2B4\x2B5\aJ\x2\x2\x2B5\x2DB\x3\x2\x2\x2\x2B6\x2B7\a \x2\x2\x2B7"+
		"\x2B8\aW\x2\x2\x2B8\x2B9\x5@!\x2\x2B9\x2BA\aX\x2\x2\x2BA\x2BD\x5<\x1F"+
		"\x2\x2BB\x2BC\a!\x2\x2\x2BC\x2BE\x5<\x1F\x2\x2BD\x2BB\x3\x2\x2\x2\x2BD"+
		"\x2BE\x3\x2\x2\x2\x2BE\x2DB\x3\x2\x2\x2\x2BF\x2C0\a\"\x2\x2\x2C0\x2C2"+
		"\aW\x2\x2\x2C1\x2C3\x5> \x2\x2C2\x2C1\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2"+
		"\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C6\aJ\x2\x2\x2C5\x2C7\x5@!\x2\x2C6\x2C5"+
		"\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2CA\aJ"+
		"\x2\x2\x2C9\x2CB\x5@!\x2\x2CA\x2C9\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB"+
		"\x2CC\x3\x2\x2\x2\x2CC\x2CD\aX\x2\x2\x2CD\x2DB\x5<\x1F\x2\x2CE\x2CF\a"+
		"$\x2\x2\x2CF\x2D0\aW\x2\x2\x2D0\x2D1\x5> \x2\x2D1\x2D2\a#\x2\x2\x2D2\x2D3"+
		"\x5@!\x2\x2D3\x2D4\aX\x2\x2\x2D4\x2D5\x5<\x1F\x2\x2D5\x2DB\x3\x2\x2\x2"+
		"\x2D6\x2D7\a\xF\x2\x2\x2D7\x2D8\x5@!\x2\x2D8\x2D9\aJ\x2\x2\x2D9\x2DB\x3"+
		"\x2\x2\x2\x2DA\x296\x3\x2\x2\x2\x2DA\x299\x3\x2\x2\x2\x2DA\x2A2\x3\x2"+
		"\x2\x2\x2DA\x2AA\x3\x2\x2\x2\x2DA\x2AB\x3\x2\x2\x2\x2DA\x2AE\x3\x2\x2"+
		"\x2\x2DA\x2B2\x3\x2\x2\x2\x2DA\x2B6\x3\x2\x2\x2\x2DA\x2BF\x3\x2\x2\x2"+
		"\x2DA\x2CE\x3\x2\x2\x2\x2DA\x2D6\x3\x2\x2\x2\x2DB=\x3\x2\x2\x2\x2DC\x2DD"+
		"\t\x2\x2\x2\x2DD\x2E0\x5\x6\x4\x2\x2DE\x2DF\aK\x2\x2\x2DF\x2E1\x5 \x11"+
		"\x2\x2E0\x2DE\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2E4\x3\x2\x2\x2"+
		"\x2E2\x2E3\aq\x2\x2\x2E3\x2E5\x5@!\x2\x2E4\x2E2\x3\x2\x2\x2\x2E4\x2E5"+
		"\x3\x2\x2\x2\x2E5?\x3\x2\x2\x2\x2E6\x2E7\b!\x1\x2\x2E7\x2E8\t\x5\x2\x2"+
		"\x2E8\x307\x5@!\x16\x2E9\x307\x5\x6\x4\x2\x2EA\x2EB\a\xE\x2\x2\x2EB\x2EC"+
		"\x5\x1C\xF\x2\x2EC\x2ED\aW\x2\x2\x2ED\x2EE\x5\x36\x1C\x2\x2EE\x2EF\aX"+
		"\x2\x2\x2EF\x307\x3\x2\x2\x2\x2F0\x2F2\a\xE\x2\x2\x2F1\x2F3\x5\xE\b\x2"+
		"\x2F2\x2F1\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4"+
		"\x2F5\aW\x2\x2\x2F5\x2F6\x5\x36\x1C\x2\x2F6\x2F7\aX\x2\x2\x2F7\x2FB\a"+
		"Q\x2\x2\x2F8\x2FA\x5,\x17\x2\x2F9\x2F8\x3\x2\x2\x2\x2FA\x2FD\x3\x2\x2"+
		"\x2\x2FB\x2F9\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FE\x3\x2\x2\x2"+
		"\x2FD\x2FB\x3\x2\x2\x2\x2FE\x2FF\aR\x2\x2\x2FF\x307\x3\x2\x2\x2\x300\x307"+
		"\aH\x2\x2\x301\x307\a\x10\x2\x2\x302\x307\a\x46\x2\x2\x303\x307\aG\x2"+
		"\x2\x304\x307\a\x11\x2\x2\x305\x307\aI\x2\x2\x306\x2E6\x3\x2\x2\x2\x306"+
		"\x2E9\x3\x2\x2\x2\x306\x2EA\x3\x2\x2\x2\x306\x2F0\x3\x2\x2\x2\x306\x300"+
		"\x3\x2\x2\x2\x306\x301\x3\x2\x2\x2\x306\x302\x3\x2\x2\x2\x306\x303\x3"+
		"\x2\x2\x2\x306\x304\x3\x2\x2\x2\x306\x305\x3\x2\x2\x2\x307\x33D\x3\x2"+
		"\x2\x2\x308\x309\f\x15\x2\x2\x309\x30A\t\x6\x2\x2\x30A\x33C\x5@!\x16\x30B"+
		"\x30C\f\x14\x2\x2\x30C\x30D\t\a\x2\x2\x30D\x33C\x5@!\x15\x30E\x30F\f\x13"+
		"\x2\x2\x30F\x310\t\x3\x2\x2\x310\x33C\x5@!\x14\x311\x312\f\x12\x2\x2\x312"+
		"\x313\t\b\x2\x2\x313\x33C\x5@!\x13\x314\x315\f\x11\x2\x2\x315\x316\ag"+
		"\x2\x2\x316\x33C\x5@!\x12\x317\x318\f\x10\x2\x2\x318\x319\ah\x2\x2\x319"+
		"\x33C\x5@!\x11\x31A\x31B\f\xF\x2\x2\x31B\x31C\ai\x2\x2\x31C\x33C\x5@!"+
		"\x10\x31D\x31E\f\xE\x2\x2\x31E\x31F\a\\\x2\x2\x31F\x33C\x5@!\xF\x320\x321"+
		"\f\r\x2\x2\x321\x322\a]\x2\x2\x322\x323\x5@!\x2\x323\x324\aK\x2\x2\x324"+
		"\x325\x5@!\r\x325\x33C\x3\x2\x2\x2\x326\x327\f\f\x2\x2\x327\x328\t\t\x2"+
		"\x2\x328\x33C\x5@!\f\x329\x32A\f\x1B\x2\x2\x32A\x32B\aL\x2\x2\x32B\x33C"+
		"\x5\x6\x4\x2\x32C\x32D\f\x1A\x2\x2\x32D\x32E\aP\x2\x2\x32E\x33C\x5\x6"+
		"\x4\x2\x32F\x330\f\x19\x2\x2\x330\x331\aW\x2\x2\x331\x332\x5\x36\x1C\x2"+
		"\x332\x333\aX\x2\x2\x333\x33C\x3\x2\x2\x2\x334\x335\f\x18\x2\x2\x335\x336"+
		"\aU\x2\x2\x336\x337\x5\x36\x1C\x2\x337\x338\aV\x2\x2\x338\x33C\x3\x2\x2"+
		"\x2\x339\x33A\f\x17\x2\x2\x33A\x33C\a]\x2\x2\x33B\x308\x3\x2\x2\x2\x33B"+
		"\x30B\x3\x2\x2\x2\x33B\x30E\x3\x2\x2\x2\x33B\x311\x3\x2\x2\x2\x33B\x314"+
		"\x3\x2\x2\x2\x33B\x317\x3\x2\x2\x2\x33B\x31A\x3\x2\x2\x2\x33B\x31D\x3"+
		"\x2\x2\x2\x33B\x320\x3\x2\x2\x2\x33B\x326\x3\x2\x2\x2\x33B\x329\x3\x2"+
		"\x2\x2\x33B\x32C\x3\x2\x2\x2\x33B\x32F\x3\x2\x2\x2\x33B\x334\x3\x2\x2"+
		"\x2\x33B\x339\x3\x2\x2\x2\x33C\x33F\x3\x2\x2\x2\x33D\x33B\x3\x2\x2\x2"+
		"\x33D\x33E\x3\x2\x2\x2\x33E\x41\x3\x2\x2\x2\x33F\x33D\x3\x2\x2\x2h\x45"+
		"KV]\x66ltz\x80\x83\x88\x8F\x97\x9D\xA4\xA8\xAF\xB5\xBA\xC2\xC7\xCC\xD0"+
		"\xD8\xDB\xEB\xF3\xFA\xFE\x106\x116\x11C\x126\x131\x138\x13E\x144\x146"+
		"\x151\x159\x160\x165\x16D\x177\x17F\x186\x18B\x191\x196\x19B\x19E\x1A5"+
		"\x1AB\x1B5\x1BB\x1C0\x1C8\x1D0\x1D6\x1DD\x1E1\x1E8\x1EE\x1F4\x1FC\x204"+
		"\x20A\x211\x219\x221\x227\x22C\x234\x239\x241\x248\x24D\x251\x258\x25C"+
		"\x25F\x262\x272\x279\x27D\x283\x288\x294\x29E\x2A6\x2BD\x2C2\x2C6\x2CA"+
		"\x2DA\x2E0\x2E4\x2F2\x2FB\x306\x33B\x33D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Exploratory.Compiler.Antlr
