//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Adamant.Exploratory.Compiler.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AdamantParser : Parser {
	public const int
		SingleLineDocComment=1, BlockDocComment=2, SingleLineComment=3, BlockComment=4, 
		PreprocessorLine=5, Whitespace=6, Newline=7, PreprocessorSkippedSection=8, 
		Using=9, Namespace=10, Class=11, Enum=12, New=13, Delete=14, Operator=15, 
		This=16, Return=17, Uninitialized=18, Where=19, Var=20, Let=21, Get=22, 
		Set=23, Do=24, While=25, If=26, Else=27, Abstract=28, Params=29, For=30, 
		Foreach=31, In=32, Ref=33, Base=34, Const=35, Sealed=36, Override=37, 
		Partial=38, Yield=39, Switch=40, Break=41, Continue=42, Try=43, Catch=44, 
		Finally=45, Throw=46, Implicit=47, Explicit=48, Conversion=49, Public=50, 
		Private=51, Protected=52, Package=53, Safe=54, Unsafe=55, Own=56, Mutable=57, 
		Immutable=58, Async=59, Await=60, BooleanLiteral=61, IntLiteral=62, NullLiteral=63, 
		StringLiteral=64, Semicolon=65, Colon=66, Dot=67, Comma=68, Arrow=69, 
		Lambda=70, LeftBrace=71, RightBrace=72, LeftAngle=73, RightAngle=74, LeftBracket=75, 
		RightBracket=76, LeftParen=77, RightParen=78, Asterisk=79, AtSign=80, 
		AddressOf=81, Coalesce=82, IsNull=83, Equal=84, NotEqual=85, LessThanOrEqual=86, 
		GreaterThanOrEqual=87, TypeList=88, Plus=89, Minus=90, Divide=91, And=92, 
		Xor=93, Or=94, Not=95, Increment=96, Decrement=97, Assign=98, AddAssign=99, 
		SubtractAssign=100, MultiplyAssign=101, DivideAssign=102, LeftShiftAssign=103, 
		RightShiftAssign=104, AndAssign=105, XorAssign=106, OrAssign=107, Identifier=108, 
		EscapedIdentifier=109, Unknown=110;
	public const int
		RULE_compilationUnit = 0, RULE_usingStatement = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_attribute = 5, RULE_baseTypes = 6, 
		RULE_modifier = 7, RULE_typeParameterList = 8, RULE_typeParameter = 9, 
		RULE_typeName = 10, RULE_typeArguments = 11, RULE_ownershipType = 12, 
		RULE_plainType = 13, RULE_funcTypeParameterList = 14, RULE_funcTypeParameter = 15, 
		RULE_constExpression = 16, RULE_typeParameterConstraintClause = 17, RULE_typeParameterConstraint = 18, 
		RULE_member = 19, RULE_parameterList = 20, RULE_parameter = 21, RULE_parameterModifier = 22, 
		RULE_constructorInitializer = 23, RULE_argumentList = 24, RULE_methodBody = 25, 
		RULE_overloadableOperator = 26, RULE_statement = 27, RULE_variableDeclaration = 28, 
		RULE_expression = 29;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingStatement", "identifier", "namespaceName", "declaration", 
		"attribute", "baseTypes", "modifier", "typeParameterList", "typeParameter", 
		"typeName", "typeArguments", "ownershipType", "plainType", "funcTypeParameterList", 
		"funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "variableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'operator'", "'this'", "'return'", 
		"'uninitialized'", "'where'", "'var'", "'let'", "'get'", "'set'", "'do'", 
		"'while'", "'if'", "'else'", "'abstract'", "'params'", "'for'", "'foreach'", 
		"'in'", "'ref'", "'base'", "'const'", "'sealed'", "'override'", "'partial'", 
		"'yeild'", "'switch'", "'break'", "'continue'", "'try'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'public'", "'private'", 
		"'protected'", "'package'", "'safe'", "'unsafe'", "'own'", "'mut'", "'immut'", 
		"'async'", "'await'", null, null, "'null'", null, "';'", "':'", "'.'", 
		"','", "'->'", "'=>'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", 
		"')'", "'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", 
		"'...'", "'+'", "'-'", "'/'", "'and'", "'xor'", "'or'", "'not'", "'++'", 
		"'--'", "'='", "'+='", "'-='", "'*='", "'/='", "'<<='", "'>>='", "'and='", 
		"'xor='", "'or='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "BlockDocComment", "SingleLineComment", 
		"BlockComment", "PreprocessorLine", "Whitespace", "Newline", "PreprocessorSkippedSection", 
		"Using", "Namespace", "Class", "Enum", "New", "Delete", "Operator", "This", 
		"Return", "Uninitialized", "Where", "Var", "Let", "Get", "Set", "Do", 
		"While", "If", "Else", "Abstract", "Params", "For", "Foreach", "In", "Ref", 
		"Base", "Const", "Sealed", "Override", "Partial", "Yield", "Switch", "Break", 
		"Continue", "Try", "Catch", "Finally", "Throw", "Implicit", "Explicit", 
		"Conversion", "Public", "Private", "Protected", "Package", "Safe", "Unsafe", 
		"Own", "Mutable", "Immutable", "Async", "Await", "BooleanLiteral", "IntLiteral", 
		"NullLiteral", "StringLiteral", "Semicolon", "Colon", "Dot", "Comma", 
		"Arrow", "Lambda", "LeftBrace", "RightBrace", "LeftAngle", "RightAngle", 
		"LeftBracket", "RightBracket", "LeftParen", "RightParen", "Asterisk", 
		"AtSign", "AddressOf", "Coalesce", "IsNull", "Equal", "NotEqual", "LessThanOrEqual", 
		"GreaterThanOrEqual", "TypeList", "Plus", "Minus", "Divide", "And", "Xor", 
		"Or", "Not", "Increment", "Decrement", "Assign", "AddAssign", "SubtractAssign", 
		"MultiplyAssign", "DivideAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AdamantParser.Eof, 0); }
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 60; usingStatement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 66; declaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 72; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingStatementContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingStatementContext usingStatement() {
		UsingStatementContext _localctx = new UsingStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(Using);
			State = 75; namespaceName();
			State = 76; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode Identifier() { return GetToken(AdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 81;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; _localctx.name = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; _localctx.name = Match(EscapedIdentifier);
				}
				break;
			case Conversion:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80; _localctx.name = Match(Conversion);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 84; Match(Dot);
				State = 85; _localctx._identifier = identifier();
				_localctx._identifiers.Add(_localctx._identifier);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public OwnershipTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingStatementContext[] usingStatement() {
			return GetRuleContexts<UsingStatementContext>();
		}
		public UsingStatementContext usingStatement(int i) {
			return GetRuleContext<UsingStatementContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 194;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(Namespace);
				State = 92; namespaceName();
				State = 93; Match(LeftBrace);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 94; usingStatement();
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 100; declaration();
					}
					}
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 106; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 108; attribute();
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 114; modifier();
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 120; Match(Class);
				State = 121; ((ClassDeclarationContext)_localctx).name = identifier();
				State = 123;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 122; typeParameterList();
					}
				}

				State = 126;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 125; baseTypes();
					}
				}

				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 128; typeParameterConstraintClause();
					}
					}
					State = 133;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 134; Match(LeftBrace);
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 135; member();
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 141; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new GlobalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 143; attribute();
					}
					}
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 149; modifier();
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 155;
				((GlobalDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((GlobalDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 156; ((GlobalDeclarationContext)_localctx).name = identifier();
				State = 159;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 157; Match(Colon);
					State = 158; ownershipType();
					}
				}

				State = 163;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 161; Match(Assign);
					State = 162; expression(0);
					}
				}

				State = 165; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 167; attribute();
						}
						} 
					}
					State = 172;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 173; modifier();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 179; ((FunctionDeclarationContext)_localctx).name = identifier();
				State = 181;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 180; typeArguments();
					}
				}

				State = 183; parameterList();
				State = 184; Match(Lambda);
				State = 185; ((FunctionDeclarationContext)_localctx).returnType = ownershipType();
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 186; typeParameterConstraintClause();
					}
					}
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 192; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(AdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(EscapedIdentifier);
			State = 199;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 197; Match(LeftParen);
				State = 198; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public TypeNameContext baseType;
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _interfaces = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 201; Match(Colon);
			State = 203;
			_la = TokenStream.La(1);
			if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
				{
				State = 202; _localctx.baseType = typeName(0);
				}
			}

			State = 214;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 205; Match(Colon);
				State = 206; _localctx._typeName = typeName(0);
				_localctx._interfaces.Add(_localctx._typeName);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 207; Match(Comma);
					State = 208; _localctx._typeName = typeName(0);
					_localctx._interfaces.Add(_localctx._typeName);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken Symbol;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			State = 230;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; _localctx.Symbol = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; _localctx.Symbol = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218; _localctx.Symbol = Match(Protected);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 4);
				{
				State = 219; _localctx.Symbol = Match(Package);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 220; _localctx.Symbol = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 221; _localctx.Symbol = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 222; _localctx.Symbol = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 223; _localctx.Symbol = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 224; _localctx.Symbol = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 225; _localctx.Symbol = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 226; _localctx.Symbol = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 227; _localctx.Symbol = Match(Override);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 13);
				{
				State = 228; _localctx.Symbol = Match(Const);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 14);
				{
				State = 229; _localctx.Symbol = Match(Async);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(LeftAngle);
			State = 233; typeParameter();
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 234; Match(Comma);
				State = 235; typeParameter();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 241; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext name;
		public IToken isList;
		public TypeNameContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; _localctx.name = identifier();
			State = 245;
			_la = TokenStream.La(1);
			if (_la==TypeList) {
				{
				State = 244; _localctx.isList = Match(TypeList);
				}
			}

			State = 249;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 247; Match(Colon);
				State = 248; _localctx.baseType = typeName(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext outerType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_typeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 252; identifier();
			State = 254;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 253; typeArguments();
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					_localctx.outerType = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 256;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 257; Match(Dot);
					State = 258; identifier();
					State = 260;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						State = 259; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public OwnershipTypeContext[] ownershipType() {
			return GetRuleContexts<OwnershipTypeContext>();
		}
		public OwnershipTypeContext ownershipType(int i) {
			return GetRuleContext<OwnershipTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(LeftAngle);
			State = 268; ownershipType();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 269; Match(Comma);
				State = 270; ownershipType();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 276; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnershipTypeContext : ParserRuleContext {
		public OwnershipTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownershipType; } }
	 
		public OwnershipTypeContext() { }
		public virtual void CopyFrom(OwnershipTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MutableTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public MutableTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public OwnedTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ImmutableTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitTypeContext : OwnershipTypeContext {
		public IToken @ref;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ImplicitTypeContext(OwnershipTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterImplicitType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitImplicitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnershipTypeContext ownershipType() {
		OwnershipTypeContext _localctx = new OwnershipTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_ownershipType);
		int _la;
		try {
			State = 297;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new MutableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 278; ((MutableTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 281; Match(Mutable);
				State = 282; plainType(0);
				}
				break;
			case 2:
				_localctx = new OwnedTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 283; ((OwnedTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 286; Match(Own);
				State = 287; plainType(0);
				}
				break;
			case 3:
				_localctx = new ImmutableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 289;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 288; ((ImmutableTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 291; Match(Immutable);
				State = 292; plainType(0);
				}
				break;
			case 4:
				_localctx = new ImplicitTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 294;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 293; ((ImplicitTypeContext)_localctx).@ref = Match(Ref);
					}
				}

				State = 296; plainType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTypeContext : ParserRuleContext {
		public PlainTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainType; } }
	 
		public PlainTypeContext() { }
		public virtual void CopyFrom(PlainTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : PlainTypeContext {
		public PlainTypeContext elementType;
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ArrayTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArraySliceTypeContext : PlainTypeContext {
		public PlainTypeContext elementType;
		public IToken s68;
		public IList<IToken> _dimensions = new List<IToken>();
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public ArraySliceTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArraySliceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArraySliceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySliceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeContext : PlainTypeContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NamedTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : PlainTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public FunctionTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : PlainTypeContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MaybeTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : PlainTypeContext {
		public PlainTypeContext valueType;
		public PlainTypeContext plainType() {
			return GetRuleContext<PlainTypeContext>(0);
		}
		public PointerTypeContext(PlainTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTypeContext plainType() {
		return plainType(0);
	}

	private PlainTypeContext plainType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlainTypeContext _localctx = new PlainTypeContext(Context, _parentState);
		PlainTypeContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_plainType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 300; typeName(0);
				}
				break;
			case 2:
				{
				_localctx = new MaybeTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 301; typeName(0);
				State = 302; Match(IsNull);
				}
				break;
			case 3:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 304; funcTypeParameterList();
				State = 305; Match(Lambda);
				State = 306; ownershipType();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 333;
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new PointerTypeContext(new PlainTypeContext(_parentctx, _parentState));
						((PointerTypeContext)_localctx).valueType = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 310;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 311; Match(Asterisk);
						}
						break;
					case 2:
						{
						_localctx = new ArrayTypeContext(new PlainTypeContext(_parentctx, _parentState));
						((ArrayTypeContext)_localctx).elementType = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 312;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 313; Match(LeftBracket);
						State = 314; constExpression();
						State = 319;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 315; Match(Comma);
							State = 316; constExpression();
							}
							}
							State = 321;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 322; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new ArraySliceTypeContext(new PlainTypeContext(_parentctx, _parentState));
						((ArraySliceTypeContext)_localctx).elementType = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_plainType);
						State = 324;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 325; Match(LeftBracket);
						State = 329;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==Comma) {
							{
							{
							State = 326; ((ArraySliceTypeContext)_localctx).s68 = Match(Comma);
							((ArraySliceTypeContext)_localctx)._dimensions.Add(((ArraySliceTypeContext)_localctx).s68);
							}
							}
							State = 331;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 332; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 351;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; Match(LeftParen);
				State = 339; funcTypeParameter();
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 340; Match(Comma);
					State = 341; funcTypeParameter();
					}
					}
					State = 346;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 347; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; Match(LeftParen);
				State = 350; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 353; parameterModifier();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 359; ownershipType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_constExpression);
		try {
			State = 364;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; Match(StringLiteral);
				}
				break;
			case Conversion:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 363; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 382;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366; Match(Where);
				State = 367; typeParameter();
				State = 368; Match(Colon);
				State = 369; typeParameterConstraint();
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 370; Match(Comma);
					State = 371; typeParameterConstraint();
					}
					}
					State = 376;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377; Match(Where);
				State = 378; typeParameter();
				State = 379;
				_la = TokenStream.La(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LeftAngle - 73)) | (1L << (RightAngle - 73)) | (1L << (LessThanOrEqual - 73)) | (1L << (GreaterThanOrEqual - 73)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 380; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterConstraint);
		try {
			State = 389;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; Match(New);
				State = 385; Match(LeftParen);
				State = 386; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; typeName(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 388; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public IdentifierContext name;
		public OwnershipTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadMethodContext : MemberContext {
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public OperatorOverloadMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverloadMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverloadMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverloadMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public IdentifierContext name;
		public OwnershipTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public PropertyContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 38, RULE_member);
		int _la;
		try {
			int _alt;
			State = 558;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 391; attribute();
					}
					}
					State = 396;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 397; modifier();
					}
					}
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 403; Match(New);
				State = 405;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 404; ((ConstructorContext)_localctx).name = identifier();
					}
				}

				State = 407; parameterList();
				State = 410;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 408; Match(Lambda);
					State = 409; ((ConstructorContext)_localctx).returnType = ownershipType();
					}
				}

				State = 413;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 412; constructorInitializer();
					}
				}

				State = 415; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 417; attribute();
					}
					}
					State = 422;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 423; modifier();
					}
					}
					State = 428;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 429; Match(Delete);
				State = 430; parameterList();
				State = 431; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 433; attribute();
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 439; modifier();
					}
					}
					State = 444;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 445; Match(Conversion);
				State = 447;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 446; typeArguments();
					}
				}

				State = 449; parameterList();
				State = 450; Match(Lambda);
				State = 451; ownershipType();
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 452; typeParameterConstraintClause();
					}
					}
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 458; methodBody();
				}
				break;
			case 4:
				_localctx = new OperatorOverloadMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 460; attribute();
					}
					}
					State = 465;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 466; modifier();
					}
					}
					State = 471;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 472; Match(Operator);
				State = 473; overloadableOperator();
				State = 474; parameterList();
				State = 475; Match(Lambda);
				State = 476; ownershipType();
				State = 477; methodBody();
				}
				break;
			case 5:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 479; attribute();
					}
					}
					State = 484;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 485; modifier();
					}
					}
					State = 490;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 491;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 492; identifier();
				State = 495;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 493; Match(Colon);
					State = 494; ownershipType();
					}
				}

				State = 499;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 497; Match(Assign);
					State = 498; expression(0);
					}
				}

				State = 501; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new PropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 503; attribute();
					}
					}
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 509; modifier();
					}
					}
					State = 514;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 515;
				((PropertyContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((PropertyContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 516; identifier();
				State = 518;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 517; typeArguments();
					}
				}

				State = 520; parameterList();
				State = 521; Match(Lambda);
				State = 522; ownershipType();
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 523; typeParameterConstraintClause();
					}
					}
					State = 528;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 529; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 531; attribute();
						}
						} 
					}
					State = 536;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 537; modifier();
					}
					}
					State = 542;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 543; ((MethodContext)_localctx).name = identifier();
				State = 545;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 544; typeArguments();
					}
				}

				State = 547; parameterList();
				State = 548; Match(Lambda);
				State = 549; ((MethodContext)_localctx).returnType = ownershipType();
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 550; typeParameterConstraintClause();
					}
					}
					State = 555;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 556; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterList);
		int _la;
		try {
			State = 573;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 560; Match(LeftParen);
				State = 561; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 562; Match(Comma);
					State = 563; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 568;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 569; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; Match(LeftParen);
				State = 572; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public IdentifierContext name;
		public OwnershipTypeContext type;
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter);
		int _la;
		try {
			State = 597;
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 575; _localctx._parameterModifier = parameterModifier();
					_localctx._modifiers.Add(_localctx._parameterModifier);
					}
					}
					State = 580;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 582;
				_la = TokenStream.La(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (Conversion - 49)) | (1L << (Identifier - 49)) | (1L << (EscapedIdentifier - 49)))) != 0)) {
					{
					State = 581; _localctx.name = identifier();
					}
				}

				State = 584; Match(Colon);
				State = 585; _localctx.type = ownershipType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 586; _localctx._parameterModifier = parameterModifier();
					_localctx._modifiers.Add(_localctx._parameterModifier);
					}
					}
					State = 591;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 592; Match(This);
				State = 595;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 593; Match(Colon);
					State = 594; Match(Mutable);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 46, RULE_constructorInitializer);
		try {
			State = 613;
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601; Match(Colon);
				State = 602; Match(Base);
				State = 603; Match(LeftParen);
				State = 604; argumentList();
				State = 605; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 607; Match(Colon);
				State = 608; Match(This);
				State = 609; Match(LeftParen);
				State = 610; argumentList();
				State = 611; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			State = 624;
			switch (TokenStream.La(1)) {
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 616; Match(Comma);
					State = 617; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 622;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodBody);
		int _la;
		try {
			State = 635;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; Match(LeftBrace);
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 627; statement();
					}
					}
					State = 632;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 633; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 634; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_overloadableOperator);
		try {
			State = 647;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 639; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 640; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 641; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 642; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 643; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 644; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 645; Match(LeftBracket);
				State = 646; Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : StatementContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		int _la;
		try {
			State = 717;
			switch (TokenStream.La(1)) {
			case Var:
			case Let:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 649; variableDeclaration();
				State = 650; Match(Semicolon);
				}
				break;
			case Unsafe:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 652; Match(Unsafe);
				State = 653; Match(LeftBrace);
				State = 657;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 654; statement();
					}
					}
					State = 659;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 660; Match(RightBrace);
				}
				break;
			case LeftBrace:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 661; Match(LeftBrace);
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << This) | (1L << Return) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Foreach) | (1L << Throw) | (1L << Conversion) | (1L << Unsafe) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 662; statement();
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 668; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 669; Match(Semicolon);
				}
				break;
			case New:
			case This:
			case Uninitialized:
			case Conversion:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Not:
			case Increment:
			case Decrement:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 670; expression(0);
				State = 671; Match(Semicolon);
				}
				break;
			case Return:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 673; Match(Return);
				State = 674; expression(0);
				State = 675; Match(Semicolon);
				}
				break;
			case Throw:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 677; Match(Throw);
				State = 678; expression(0);
				State = 679; Match(Semicolon);
				}
				break;
			case If:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 681; Match(If);
				State = 682; Match(LeftParen);
				State = 683; ((IfStatementContext)_localctx).condition = expression(0);
				State = 684; Match(RightParen);
				State = 685; ((IfStatementContext)_localctx).then = statement();
				State = 688;
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 686; Match(Else);
					State = 687; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 690; Match(For);
				State = 691; Match(LeftParen);
				State = 693;
				_la = TokenStream.La(1);
				if (_la==Var || _la==Let) {
					{
					State = 692; variableDeclaration();
					}
				}

				State = 695; Match(Semicolon);
				State = 697;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 696; expression(0);
					}
				}

				State = 699; Match(Semicolon);
				State = 701;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << This) | (1L << Uninitialized) | (1L << Conversion) | (1L << BooleanLiteral) | (1L << IntLiteral) | (1L << NullLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StringLiteral - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Not - 64)) | (1L << (Increment - 64)) | (1L << (Decrement - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 700; expression(0);
					}
				}

				State = 703; Match(RightParen);
				State = 704; statement();
				}
				break;
			case Foreach:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 705; Match(Foreach);
				State = 706; Match(LeftParen);
				State = 707; variableDeclaration();
				State = 708; Match(In);
				State = 709; expression(0);
				State = 710; Match(RightParen);
				State = 711; statement();
				}
				break;
			case Delete:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 713; Match(Delete);
				State = 714; expression(0);
				State = 715; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnershipTypeContext ownershipType() {
			return GetRuleContext<OwnershipTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 720; identifier();
			State = 723;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 721; Match(Colon);
				State = 722; ownershipType();
				}
			}

			State = 727;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 725; Match(Assign);
				State = 726; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(AdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(AdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(AdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken s73;
		public IList<IToken> _ops = new List<IToken>();
		public IToken s74;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAdamantParserListener typedListener = listener as IAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdamantParserVisitor<TResult> typedVisitor = visitor as IAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 730;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Asterisk - 79)) | (1L << (AddressOf - 79)) | (1L << (Plus - 79)) | (1L << (Minus - 79)) | (1L << (Not - 79)) | (1L << (Increment - 79)) | (1L << (Decrement - 79)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 731; expression(21);
				}
				break;
			case 2:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 732; identifier();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 733; Match(New);
				State = 734; typeName(0);
				State = 735; Match(LeftParen);
				State = 736; argumentList();
				State = 737; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 739; Match(New);
				State = 741;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 740; baseTypes();
					}
				}

				State = 743; Match(LeftParen);
				State = 744; argumentList();
				State = 745; Match(RightParen);
				State = 746; Match(LeftBrace);
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Abstract) | (1L << Const) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Package) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 747; member();
					}
					}
					State = 752;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 753; Match(RightBrace);
				}
				break;
			case 5:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 755; Match(NullLiteral);
				}
				break;
			case 6:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 756; Match(This);
				}
				break;
			case 7:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 757; Match(BooleanLiteral);
				}
				break;
			case 8:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 758; Match(IntLiteral);
				}
				break;
			case 9:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 759; Match(Uninitialized);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 760; Match(StringLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 824;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 822;
					switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 763;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 764;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 765; expression(21);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 766;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 767;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 768; expression(20);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 769;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 774;
						switch (TokenStream.La(1)) {
						case LeftAngle:
							{
							State = 770; ((ShiftExpressionContext)_localctx).s73 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s73);
							State = 771; ((ShiftExpressionContext)_localctx).s73 = Match(LeftAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s73);
							}
							break;
						case RightAngle:
							{
							State = 772; ((ShiftExpressionContext)_localctx).s74 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s74);
							State = 773; ((ShiftExpressionContext)_localctx).s74 = Match(RightAngle);
							((ShiftExpressionContext)_localctx)._ops.Add(((ShiftExpressionContext)_localctx).s74);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 776; expression(19);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 778;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LeftAngle - 73)) | (1L << (RightAngle - 73)) | (1L << (LessThanOrEqual - 73)) | (1L << (GreaterThanOrEqual - 73)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 779; expression(18);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 780;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 781;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 782; ((EqualityExpressionContext)_localctx).rhs = expression(17);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 783;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 784; Match(And);
						State = 785; expression(16);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 786;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 787; Match(Xor);
						State = 788; expression(15);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 789;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 790; Match(Or);
						State = 791; expression(14);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 792;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 793; Match(Coalesce);
						State = 794; expression(13);
						}
						break;
					case 10:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 795;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 796; Match(IsNull);
						State = 797; ((IfExpressionContext)_localctx).then = expression(0);
						State = 798; Match(Colon);
						State = 799; ((IfExpressionContext)_localctx).@else = expression(11);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 801;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 802;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (Assign - 98)) | (1L << (AddAssign - 98)) | (1L << (SubtractAssign - 98)) | (1L << (MultiplyAssign - 98)) | (1L << (DivideAssign - 98)) | (1L << (LeftShiftAssign - 98)) | (1L << (RightShiftAssign - 98)) | (1L << (AndAssign - 98)) | (1L << (XorAssign - 98)) | (1L << (OrAssign - 98)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 803; ((AssignmentExpressionContext)_localctx).rvalue = expression(10);
						}
						break;
					case 12:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 804;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 805; Match(Dot);
						State = 806; identifier();
						}
						break;
					case 13:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 807;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 808; Match(Arrow);
						State = 809; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 810;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 811; Match(LeftParen);
						State = 812; argumentList();
						State = 813; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 815;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 816; Match(LeftBracket);
						State = 817; argumentList();
						State = 818; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 820;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 821; Match(IsNull);
						}
						break;
					}
					} 
				}
				State = 826;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 13: return plainType_sempred((PlainTypeContext)_localctx, predIndex);
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool plainType_sempred(PlainTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 20);
		case 5: return Precpred(Context, 19);
		case 6: return Precpred(Context, 18);
		case 7: return Precpred(Context, 17);
		case 8: return Precpred(Context, 16);
		case 9: return Precpred(Context, 15);
		case 10: return Precpred(Context, 14);
		case 11: return Precpred(Context, 13);
		case 12: return Precpred(Context, 12);
		case 13: return Precpred(Context, 11);
		case 14: return Precpred(Context, 10);
		case 15: return Precpred(Context, 26);
		case 16: return Precpred(Context, 25);
		case 17: return Precpred(Context, 24);
		case 18: return Precpred(Context, 23);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3p\x33E\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\a\x2"+
		"@\n\x2\f\x2\xE\x2\x43\v\x2\x3\x2\a\x2\x46\n\x2\f\x2\xE\x2I\v\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x5\x4T\n\x4\x3\x5\x3"+
		"\x5\x3\x5\a\x5Y\n\x5\f\x5\xE\x5\\\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x62"+
		"\n\x6\f\x6\xE\x6\x65\v\x6\x3\x6\a\x6h\n\x6\f\x6\xE\x6k\v\x6\x3\x6\x3\x6"+
		"\x3\x6\a\x6p\n\x6\f\x6\xE\x6s\v\x6\x3\x6\a\x6v\n\x6\f\x6\xE\x6y\v\x6\x3"+
		"\x6\x3\x6\x3\x6\x5\x6~\n\x6\x3\x6\x5\x6\x81\n\x6\x3\x6\a\x6\x84\n\x6\f"+
		"\x6\xE\x6\x87\v\x6\x3\x6\x3\x6\a\x6\x8B\n\x6\f\x6\xE\x6\x8E\v\x6\x3\x6"+
		"\x3\x6\x3\x6\a\x6\x93\n\x6\f\x6\xE\x6\x96\v\x6\x3\x6\a\x6\x99\n\x6\f\x6"+
		"\xE\x6\x9C\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xA2\n\x6\x3\x6\x3\x6\x5"+
		"\x6\xA6\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xAB\n\x6\f\x6\xE\x6\xAE\v\x6\x3\x6"+
		"\a\x6\xB1\n\x6\f\x6\xE\x6\xB4\v\x6\x3\x6\x3\x6\x5\x6\xB8\n\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6\xBE\n\x6\f\x6\xE\x6\xC1\v\x6\x3\x6\x3\x6\x5\x6\xC5"+
		"\n\x6\x3\a\x3\a\x3\a\x5\a\xCA\n\a\x3\b\x3\b\x5\b\xCE\n\b\x3\b\x3\b\x3"+
		"\b\x3\b\a\b\xD4\n\b\f\b\xE\b\xD7\v\b\x5\b\xD9\n\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xE9\n\t\x3\n\x3"+
		"\n\x3\n\x3\n\a\n\xEF\n\n\f\n\xE\n\xF2\v\n\x3\n\x3\n\x3\v\x3\v\x5\v\xF8"+
		"\n\v\x3\v\x3\v\x5\v\xFC\n\v\x3\f\x3\f\x3\f\x5\f\x101\n\f\x3\f\x3\f\x3"+
		"\f\x3\f\x5\f\x107\n\f\a\f\x109\n\f\f\f\xE\f\x10C\v\f\x3\r\x3\r\x3\r\x3"+
		"\r\a\r\x112\n\r\f\r\xE\r\x115\v\r\x3\r\x3\r\x3\xE\x5\xE\x11A\n\xE\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\x11F\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x124\n\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xE\x129\n\xE\x3\xE\x5\xE\x12C\n\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x137\n\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\a\xF\x140\n\xF\f\xF\xE\xF\x143\v\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\a\xF\x14A\n\xF\f\xF\xE\xF\x14D\v\xF\x3\xF\a\xF\x150\n"+
		"\xF\f\xF\xE\xF\x153\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x159\n\x10"+
		"\f\x10\xE\x10\x15C\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x162\n\x10"+
		"\x3\x11\a\x11\x165\n\x11\f\x11\xE\x11\x168\v\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x16F\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\a\x13\x177\n\x13\f\x13\xE\x13\x17A\v\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\x181\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14"+
		"\x188\n\x14\x3\x15\a\x15\x18B\n\x15\f\x15\xE\x15\x18E\v\x15\x3\x15\a\x15"+
		"\x191\n\x15\f\x15\xE\x15\x194\v\x15\x3\x15\x3\x15\x5\x15\x198\n\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x19D\n\x15\x3\x15\x5\x15\x1A0\n\x15\x3\x15\x3"+
		"\x15\x3\x15\a\x15\x1A5\n\x15\f\x15\xE\x15\x1A8\v\x15\x3\x15\a\x15\x1AB"+
		"\n\x15\f\x15\xE\x15\x1AE\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15"+
		"\x1B5\n\x15\f\x15\xE\x15\x1B8\v\x15\x3\x15\a\x15\x1BB\n\x15\f\x15\xE\x15"+
		"\x1BE\v\x15\x3\x15\x3\x15\x5\x15\x1C2\n\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\a\x15\x1C8\n\x15\f\x15\xE\x15\x1CB\v\x15\x3\x15\x3\x15\x3\x15\a\x15\x1D0"+
		"\n\x15\f\x15\xE\x15\x1D3\v\x15\x3\x15\a\x15\x1D6\n\x15\f\x15\xE\x15\x1D9"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x1E3"+
		"\n\x15\f\x15\xE\x15\x1E6\v\x15\x3\x15\a\x15\x1E9\n\x15\f\x15\xE\x15\x1EC"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x1F2\n\x15\x3\x15\x3\x15\x5"+
		"\x15\x1F6\n\x15\x3\x15\x3\x15\x3\x15\a\x15\x1FB\n\x15\f\x15\xE\x15\x1FE"+
		"\v\x15\x3\x15\a\x15\x201\n\x15\f\x15\xE\x15\x204\v\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x209\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x20F\n\x15\f"+
		"\x15\xE\x15\x212\v\x15\x3\x15\x3\x15\x3\x15\a\x15\x217\n\x15\f\x15\xE"+
		"\x15\x21A\v\x15\x3\x15\a\x15\x21D\n\x15\f\x15\xE\x15\x220\v\x15\x3\x15"+
		"\x3\x15\x5\x15\x224\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x22A\n\x15"+
		"\f\x15\xE\x15\x22D\v\x15\x3\x15\x3\x15\x5\x15\x231\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\a\x16\x237\n\x16\f\x16\xE\x16\x23A\v\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x5\x16\x240\n\x16\x3\x17\a\x17\x243\n\x17\f\x17\xE\x17"+
		"\x246\v\x17\x3\x17\x5\x17\x249\n\x17\x3\x17\x3\x17\x3\x17\a\x17\x24E\n"+
		"\x17\f\x17\xE\x17\x251\v\x17\x3\x17\x3\x17\x3\x17\x5\x17\x256\n\x17\x5"+
		"\x17\x258\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x268\n\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\a\x1A\x26D\n\x1A\f\x1A\xE\x1A\x270\v\x1A\x3\x1A\x5\x1A\x273"+
		"\n\x1A\x3\x1B\x3\x1B\a\x1B\x277\n\x1B\f\x1B\xE\x1B\x27A\v\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x27E\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x28A\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\a\x1D\x292\n\x1D\f\x1D\xE\x1D\x295\v\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\a\x1D\x29A\n\x1D\f\x1D\xE\x1D\x29D\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2B3\n\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x2B8\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2BC\n\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x2C0\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2D0\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2D6\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2DA"+
		"\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2E8\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\a\x1F\x2EF\n\x1F\f\x1F\xE\x1F\x2F2\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2FC\n\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x309\n"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x339\n\x1F\f\x1F"+
		"\xE\x1F\x33C\v\x1F\x3\x1F\x2\x5\x16\x1C< \x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<\x2\n\x3\x2\x16\x17"+
		"\x4\x2KLXY\x3\x2\x18\x19\x6\x2QQSS[\\\x61\x63\x4\x2QQ]]\x3\x2[\\\x3\x2"+
		"VW\x3\x2\x64m\x3C7\x2\x41\x3\x2\x2\x2\x4L\x3\x2\x2\x2\x6S\x3\x2\x2\x2"+
		"\bU\x3\x2\x2\x2\n\xC4\x3\x2\x2\x2\f\xC6\x3\x2\x2\x2\xE\xCB\x3\x2\x2\x2"+
		"\x10\xE8\x3\x2\x2\x2\x12\xEA\x3\x2\x2\x2\x14\xF5\x3\x2\x2\x2\x16\xFD\x3"+
		"\x2\x2\x2\x18\x10D\x3\x2\x2\x2\x1A\x12B\x3\x2\x2\x2\x1C\x136\x3\x2\x2"+
		"\x2\x1E\x161\x3\x2\x2\x2 \x166\x3\x2\x2\x2\"\x16E\x3\x2\x2\x2$\x180\x3"+
		"\x2\x2\x2&\x187\x3\x2\x2\x2(\x230\x3\x2\x2\x2*\x23F\x3\x2\x2\x2,\x257"+
		"\x3\x2\x2\x2.\x259\x3\x2\x2\x2\x30\x267\x3\x2\x2\x2\x32\x272\x3\x2\x2"+
		"\x2\x34\x27D\x3\x2\x2\x2\x36\x289\x3\x2\x2\x2\x38\x2CF\x3\x2\x2\x2:\x2D1"+
		"\x3\x2\x2\x2<\x2FB\x3\x2\x2\x2>@\x5\x4\x3\x2?>\x3\x2\x2\x2@\x43\x3\x2"+
		"\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42G\x3\x2\x2\x2\x43\x41\x3"+
		"\x2\x2\x2\x44\x46\x5\n\x6\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2\x2\x2G\x45"+
		"\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IG\x3\x2\x2\x2JK\a\x2\x2\x3K\x3"+
		"\x3\x2\x2\x2LM\a\v\x2\x2MN\x5\b\x5\x2NO\a\x43\x2\x2O\x5\x3\x2\x2\x2PT"+
		"\an\x2\x2QT\ao\x2\x2RT\a\x33\x2\x2SP\x3\x2\x2\x2SQ\x3\x2\x2\x2SR\x3\x2"+
		"\x2\x2T\a\x3\x2\x2\x2UZ\x5\x6\x4\x2VW\a\x45\x2\x2WY\x5\x6\x4\x2XV\x3\x2"+
		"\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\t\x3\x2\x2\x2\\Z\x3"+
		"\x2\x2\x2]^\a\f\x2\x2^_\x5\b\x5\x2_\x63\aI\x2\x2`\x62\x5\x4\x3\x2\x61"+
		"`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2"+
		"\x2\x64i\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66h\x5\n\x6\x2g\x66\x3\x2\x2"+
		"\x2hk\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2\x2ki\x3\x2\x2"+
		"\x2lm\aJ\x2\x2m\xC5\x3\x2\x2\x2np\x5\f\a\x2on\x3\x2\x2\x2ps\x3\x2\x2\x2"+
		"qo\x3\x2\x2\x2qr\x3\x2\x2\x2rw\x3\x2\x2\x2sq\x3\x2\x2\x2tv\x5\x10\t\x2"+
		"ut\x3\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2xz\x3\x2\x2\x2"+
		"yw\x3\x2\x2\x2z{\a\r\x2\x2{}\x5\x6\x4\x2|~\x5\x12\n\x2}|\x3\x2\x2\x2}"+
		"~\x3\x2\x2\x2~\x80\x3\x2\x2\x2\x7F\x81\x5\xE\b\x2\x80\x7F\x3\x2\x2\x2"+
		"\x80\x81\x3\x2\x2\x2\x81\x85\x3\x2\x2\x2\x82\x84\x5$\x13\x2\x83\x82\x3"+
		"\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2"+
		"\x86\x88\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8C\aI\x2\x2\x89\x8B\x5("+
		"\x15\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C"+
		"\x8D\x3\x2\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x90\aJ\x2"+
		"\x2\x90\xC5\x3\x2\x2\x2\x91\x93\x5\f\a\x2\x92\x91\x3\x2\x2\x2\x93\x96"+
		"\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x9A\x3\x2\x2"+
		"\x2\x96\x94\x3\x2\x2\x2\x97\x99\x5\x10\t\x2\x98\x97\x3\x2\x2\x2\x99\x9C"+
		"\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9D\x3\x2\x2"+
		"\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9E\t\x2\x2\x2\x9E\xA1\x5\x6\x4\x2\x9F\xA0"+
		"\a\x44\x2\x2\xA0\xA2\x5\x1A\xE\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2"+
		"\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA4\a\x64\x2\x2\xA4\xA6\x5<\x1F\x2\xA5\xA3"+
		"\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\a\x43\x2"+
		"\x2\xA8\xC5\x3\x2\x2\x2\xA9\xAB\x5\f\a\x2\xAA\xA9\x3\x2\x2\x2\xAB\xAE"+
		"\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xB2\x3\x2\x2"+
		"\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB1\x5\x10\t\x2\xB0\xAF\x3\x2\x2\x2\xB1\xB4"+
		"\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB5\x3\x2\x2"+
		"\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB7\x5\x6\x4\x2\xB6\xB8\x5\x18\r\x2\xB7\xB6"+
		"\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x5*\x16\x2"+
		"\xBA\xBB\aH\x2\x2\xBB\xBF\x5\x1A\xE\x2\xBC\xBE\x5$\x13\x2\xBD\xBC\x3\x2"+
		"\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0"+
		"\xC2\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC3\x5\x34\x1B\x2\xC3\xC5\x3"+
		"\x2\x2\x2\xC4]\x3\x2\x2\x2\xC4q\x3\x2\x2\x2\xC4\x94\x3\x2\x2\x2\xC4\xAC"+
		"\x3\x2\x2\x2\xC5\v\x3\x2\x2\x2\xC6\xC9\ao\x2\x2\xC7\xC8\aO\x2\x2\xC8\xCA"+
		"\aP\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\r\x3\x2\x2\x2\xCB"+
		"\xCD\a\x44\x2\x2\xCC\xCE\x5\x16\f\x2\xCD\xCC\x3\x2\x2\x2\xCD\xCE\x3\x2"+
		"\x2\x2\xCE\xD8\x3\x2\x2\x2\xCF\xD0\a\x44\x2\x2\xD0\xD5\x5\x16\f\x2\xD1"+
		"\xD2\a\x46\x2\x2\xD2\xD4\x5\x16\f\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD7\x3\x2"+
		"\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD9\x3\x2\x2\x2\xD7"+
		"\xD5\x3\x2\x2\x2\xD8\xCF\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xF\x3\x2"+
		"\x2\x2\xDA\xE9\a\x34\x2\x2\xDB\xE9\a\x35\x2\x2\xDC\xE9\a\x36\x2\x2\xDD"+
		"\xE9\a\x37\x2\x2\xDE\xE9\a\x38\x2\x2\xDF\xE9\a\x39\x2\x2\xE0\xE9\a\x1E"+
		"\x2\x2\xE1\xE9\a(\x2\x2\xE2\xE9\a\x31\x2\x2\xE3\xE9\a\x32\x2\x2\xE4\xE9"+
		"\a&\x2\x2\xE5\xE9\a\'\x2\x2\xE6\xE9\a%\x2\x2\xE7\xE9\a=\x2\x2\xE8\xDA"+
		"\x3\x2\x2\x2\xE8\xDB\x3\x2\x2\x2\xE8\xDC\x3\x2\x2\x2\xE8\xDD\x3\x2\x2"+
		"\x2\xE8\xDE\x3\x2\x2\x2\xE8\xDF\x3\x2\x2\x2\xE8\xE0\x3\x2\x2\x2\xE8\xE1"+
		"\x3\x2\x2\x2\xE8\xE2\x3\x2\x2\x2\xE8\xE3\x3\x2\x2\x2\xE8\xE4\x3\x2\x2"+
		"\x2\xE8\xE5\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE7\x3\x2\x2\x2\xE9\x11"+
		"\x3\x2\x2\x2\xEA\xEB\aK\x2\x2\xEB\xF0\x5\x14\v\x2\xEC\xED\a\x46\x2\x2"+
		"\xED\xEF\x5\x14\v\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3"+
		"\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2"+
		"\xF3\xF4\aL\x2\x2\xF4\x13\x3\x2\x2\x2\xF5\xF7\x5\x6\x4\x2\xF6\xF8\aZ\x2"+
		"\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xFA"+
		"\a\x44\x2\x2\xFA\xFC\x5\x16\f\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2"+
		"\x2\xFC\x15\x3\x2\x2\x2\xFD\xFE\b\f\x1\x2\xFE\x100\x5\x6\x4\x2\xFF\x101"+
		"\x5\x18\r\x2\x100\xFF\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x10A\x3\x2"+
		"\x2\x2\x102\x103\f\x4\x2\x2\x103\x104\a\x45\x2\x2\x104\x106\x5\x6\x4\x2"+
		"\x105\x107\x5\x18\r\x2\x106\x105\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107"+
		"\x109\x3\x2\x2\x2\x108\x102\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108"+
		"\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x17\x3\x2\x2\x2\x10C\x10A\x3\x2"+
		"\x2\x2\x10D\x10E\aK\x2\x2\x10E\x113\x5\x1A\xE\x2\x10F\x110\a\x46\x2\x2"+
		"\x110\x112\x5\x1A\xE\x2\x111\x10F\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x116\x3\x2\x2\x2\x115\x113"+
		"\x3\x2\x2\x2\x116\x117\aL\x2\x2\x117\x19\x3\x2\x2\x2\x118\x11A\a#\x2\x2"+
		"\x119\x118\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B"+
		"\x11C\a;\x2\x2\x11C\x12C\x5\x1C\xF\x2\x11D\x11F\a#\x2\x2\x11E\x11D\x3"+
		"\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a:\x2"+
		"\x2\x121\x12C\x5\x1C\xF\x2\x122\x124\a#\x2\x2\x123\x122\x3\x2\x2\x2\x123"+
		"\x124\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126\a<\x2\x2\x126\x12C\x5"+
		"\x1C\xF\x2\x127\x129\a#\x2\x2\x128\x127\x3\x2\x2\x2\x128\x129\x3\x2\x2"+
		"\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x5\x1C\xF\x2\x12B\x119\x3\x2\x2\x2"+
		"\x12B\x11E\x3\x2\x2\x2\x12B\x123\x3\x2\x2\x2\x12B\x128\x3\x2\x2\x2\x12C"+
		"\x1B\x3\x2\x2\x2\x12D\x12E\b\xF\x1\x2\x12E\x137\x5\x16\f\x2\x12F\x130"+
		"\x5\x16\f\x2\x130\x131\aU\x2\x2\x131\x137\x3\x2\x2\x2\x132\x133\x5\x1E"+
		"\x10\x2\x133\x134\aH\x2\x2\x134\x135\x5\x1A\xE\x2\x135\x137\x3\x2\x2\x2"+
		"\x136\x12D\x3\x2\x2\x2\x136\x12F\x3\x2\x2\x2\x136\x132\x3\x2\x2\x2\x137"+
		"\x151\x3\x2\x2\x2\x138\x139\f\x6\x2\x2\x139\x150\aQ\x2\x2\x13A\x13B\f"+
		"\x5\x2\x2\x13B\x13C\aM\x2\x2\x13C\x141\x5\"\x12\x2\x13D\x13E\a\x46\x2"+
		"\x2\x13E\x140\x5\"\x12\x2\x13F\x13D\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2"+
		"\x141\x13F\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x144\x3\x2\x2\x2\x143"+
		"\x141\x3\x2\x2\x2\x144\x145\aN\x2\x2\x145\x150\x3\x2\x2\x2\x146\x147\f"+
		"\x4\x2\x2\x147\x14B\aM\x2\x2\x148\x14A\a\x46\x2\x2\x149\x148\x3\x2\x2"+
		"\x2\x14A\x14D\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2"+
		"\x14C\x14E\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14E\x150\aN\x2\x2\x14F\x138"+
		"\x3\x2\x2\x2\x14F\x13A\x3\x2\x2\x2\x14F\x146\x3\x2\x2\x2\x150\x153\x3"+
		"\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x1D\x3\x2\x2"+
		"\x2\x153\x151\x3\x2\x2\x2\x154\x155\aO\x2\x2\x155\x15A\x5 \x11\x2\x156"+
		"\x157\a\x46\x2\x2\x157\x159\x5 \x11\x2\x158\x156\x3\x2\x2\x2\x159\x15C"+
		"\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15D\x3"+
		"\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15D\x15E\aP\x2\x2\x15E\x162\x3\x2\x2"+
		"\x2\x15F\x160\aO\x2\x2\x160\x162\aP\x2\x2\x161\x154\x3\x2\x2\x2\x161\x15F"+
		"\x3\x2\x2\x2\x162\x1F\x3\x2\x2\x2\x163\x165\x5.\x18\x2\x164\x163\x3\x2"+
		"\x2\x2\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2"+
		"\x2\x167\x169\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x169\x16A\x5\x1A\xE\x2"+
		"\x16A!\x3\x2\x2\x2\x16B\x16F\a@\x2\x2\x16C\x16F\a\x42\x2\x2\x16D\x16F"+
		"\x5\x6\x4\x2\x16E\x16B\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16D\x3"+
		"\x2\x2\x2\x16F#\x3\x2\x2\x2\x170\x171\a\x15\x2\x2\x171\x172\x5\x14\v\x2"+
		"\x172\x173\a\x44\x2\x2\x173\x178\x5&\x14\x2\x174\x175\a\x46\x2\x2\x175"+
		"\x177\x5&\x14\x2\x176\x174\x3\x2\x2\x2\x177\x17A\x3\x2\x2\x2\x178\x176"+
		"\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x181\x3\x2\x2\x2\x17A\x178\x3"+
		"\x2\x2\x2\x17B\x17C\a\x15\x2\x2\x17C\x17D\x5\x14\v\x2\x17D\x17E\t\x3\x2"+
		"\x2\x17E\x17F\a@\x2\x2\x17F\x181\x3\x2\x2\x2\x180\x170\x3\x2\x2\x2\x180"+
		"\x17B\x3\x2\x2\x2\x181%\x3\x2\x2\x2\x182\x183\a\xF\x2\x2\x183\x184\aO"+
		"\x2\x2\x184\x188\aP\x2\x2\x185\x188\x5\x16\f\x2\x186\x188\x5\x14\v\x2"+
		"\x187\x182\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x187\x186\x3\x2\x2\x2\x188"+
		"\'\x3\x2\x2\x2\x189\x18B\x5\f\a\x2\x18A\x189\x3\x2\x2\x2\x18B\x18E\x3"+
		"\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x192\x3\x2"+
		"\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F\x191\x5\x10\t\x2\x190\x18F\x3\x2\x2"+
		"\x2\x191\x194\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2"+
		"\x193\x195\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x195\x197\a\xF\x2\x2\x196"+
		"\x198\x5\x6\x4\x2\x197\x196\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199"+
		"\x3\x2\x2\x2\x199\x19C\x5*\x16\x2\x19A\x19B\aH\x2\x2\x19B\x19D\x5\x1A"+
		"\xE\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19F\x3\x2\x2"+
		"\x2\x19E\x1A0\x5\x30\x19\x2\x19F\x19E\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2"+
		"\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x5\x34\x1B\x2\x1A2\x231\x3\x2\x2\x2\x1A3"+
		"\x1A5\x5\f\a\x2\x1A4\x1A3\x3\x2\x2\x2\x1A5\x1A8\x3\x2\x2\x2\x1A6\x1A4"+
		"\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1AC\x3\x2\x2\x2\x1A8\x1A6\x3"+
		"\x2\x2\x2\x1A9\x1AB\x5\x10\t\x2\x1AA\x1A9\x3\x2\x2\x2\x1AB\x1AE\x3\x2"+
		"\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AF\x3\x2\x2"+
		"\x2\x1AE\x1AC\x3\x2\x2\x2\x1AF\x1B0\a\x10\x2\x2\x1B0\x1B1\x5*\x16\x2\x1B1"+
		"\x1B2\x5\x34\x1B\x2\x1B2\x231\x3\x2\x2\x2\x1B3\x1B5\x5\f\a\x2\x1B4\x1B3"+
		"\x3\x2\x2\x2\x1B5\x1B8\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6\x1B7\x3"+
		"\x2\x2\x2\x1B7\x1BC\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B9\x1BB\x5\x10"+
		"\t\x2\x1BA\x1B9\x3\x2\x2\x2\x1BB\x1BE\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2"+
		"\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1BF\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BF"+
		"\x1C1\a\x33\x2\x2\x1C0\x1C2\x5\x18\r\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1\x1C2"+
		"\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x5*\x16\x2\x1C4\x1C5\aH\x2"+
		"\x2\x1C5\x1C9\x5\x1A\xE\x2\x1C6\x1C8\x5$\x13\x2\x1C7\x1C6\x3\x2\x2\x2"+
		"\x1C8\x1CB\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA"+
		"\x1CC\x3\x2\x2\x2\x1CB\x1C9\x3\x2\x2\x2\x1CC\x1CD\x5\x34\x1B\x2\x1CD\x231"+
		"\x3\x2\x2\x2\x1CE\x1D0\x5\f\a\x2\x1CF\x1CE\x3\x2\x2\x2\x1D0\x1D3\x3\x2"+
		"\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D7\x3\x2\x2"+
		"\x2\x1D3\x1D1\x3\x2\x2\x2\x1D4\x1D6\x5\x10\t\x2\x1D5\x1D4\x3\x2\x2\x2"+
		"\x1D6\x1D9\x3\x2\x2\x2\x1D7\x1D5\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8"+
		"\x1DA\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1DA\x1DB\a\x11\x2\x2\x1DB\x1DC"+
		"\x5\x36\x1C\x2\x1DC\x1DD\x5*\x16\x2\x1DD\x1DE\aH\x2\x2\x1DE\x1DF\x5\x1A"+
		"\xE\x2\x1DF\x1E0\x5\x34\x1B\x2\x1E0\x231\x3\x2\x2\x2\x1E1\x1E3\x5\f\a"+
		"\x2\x1E2\x1E1\x3\x2\x2\x2\x1E3\x1E6\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2"+
		"\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1EA\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2\x1E7"+
		"\x1E9\x5\x10\t\x2\x1E8\x1E7\x3\x2\x2\x2\x1E9\x1EC\x3\x2\x2\x2\x1EA\x1E8"+
		"\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1ED\x3\x2\x2\x2\x1EC\x1EA\x3"+
		"\x2\x2\x2\x1ED\x1EE\t\x2\x2\x2\x1EE\x1F1\x5\x6\x4\x2\x1EF\x1F0\a\x44\x2"+
		"\x2\x1F0\x1F2\x5\x1A\xE\x2\x1F1\x1EF\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2"+
		"\x1F2\x1F5\x3\x2\x2\x2\x1F3\x1F4\a\x64\x2\x2\x1F4\x1F6\x5<\x1F\x2\x1F5"+
		"\x1F3\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1F8"+
		"\a\x43\x2\x2\x1F8\x231\x3\x2\x2\x2\x1F9\x1FB\x5\f\a\x2\x1FA\x1F9\x3\x2"+
		"\x2\x2\x1FB\x1FE\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2"+
		"\x2\x1FD\x202\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FF\x201\x5\x10\t\x2"+
		"\x200\x1FF\x3\x2\x2\x2\x201\x204\x3\x2\x2\x2\x202\x200\x3\x2\x2\x2\x202"+
		"\x203\x3\x2\x2\x2\x203\x205\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2\x205\x206"+
		"\t\x4\x2\x2\x206\x208\x5\x6\x4\x2\x207\x209\x5\x18\r\x2\x208\x207\x3\x2"+
		"\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20B\x5*\x16\x2"+
		"\x20B\x20C\aH\x2\x2\x20C\x210\x5\x1A\xE\x2\x20D\x20F\x5$\x13\x2\x20E\x20D"+
		"\x3\x2\x2\x2\x20F\x212\x3\x2\x2\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3"+
		"\x2\x2\x2\x211\x213\x3\x2\x2\x2\x212\x210\x3\x2\x2\x2\x213\x214\x5\x34"+
		"\x1B\x2\x214\x231\x3\x2\x2\x2\x215\x217\x5\f\a\x2\x216\x215\x3\x2\x2\x2"+
		"\x217\x21A\x3\x2\x2\x2\x218\x216\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219"+
		"\x21E\x3\x2\x2\x2\x21A\x218\x3\x2\x2\x2\x21B\x21D\x5\x10\t\x2\x21C\x21B"+
		"\x3\x2\x2\x2\x21D\x220\x3\x2\x2\x2\x21E\x21C\x3\x2\x2\x2\x21E\x21F\x3"+
		"\x2\x2\x2\x21F\x221\x3\x2\x2\x2\x220\x21E\x3\x2\x2\x2\x221\x223\x5\x6"+
		"\x4\x2\x222\x224\x5\x18\r\x2\x223\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2"+
		"\x2\x224\x225\x3\x2\x2\x2\x225\x226\x5*\x16\x2\x226\x227\aH\x2\x2\x227"+
		"\x22B\x5\x1A\xE\x2\x228\x22A\x5$\x13\x2\x229\x228\x3\x2\x2\x2\x22A\x22D"+
		"\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22E\x3"+
		"\x2\x2\x2\x22D\x22B\x3\x2\x2\x2\x22E\x22F\x5\x34\x1B\x2\x22F\x231\x3\x2"+
		"\x2\x2\x230\x18C\x3\x2\x2\x2\x230\x1A6\x3\x2\x2\x2\x230\x1B6\x3\x2\x2"+
		"\x2\x230\x1D1\x3\x2\x2\x2\x230\x1E4\x3\x2\x2\x2\x230\x1FC\x3\x2\x2\x2"+
		"\x230\x218\x3\x2\x2\x2\x231)\x3\x2\x2\x2\x232\x233\aO\x2\x2\x233\x238"+
		"\x5,\x17\x2\x234\x235\a\x46\x2\x2\x235\x237\x5,\x17\x2\x236\x234\x3\x2"+
		"\x2\x2\x237\x23A\x3\x2\x2\x2\x238\x236\x3\x2\x2\x2\x238\x239\x3\x2\x2"+
		"\x2\x239\x23B\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23B\x23C\aP\x2\x2\x23C"+
		"\x240\x3\x2\x2\x2\x23D\x23E\aO\x2\x2\x23E\x240\aP\x2\x2\x23F\x232\x3\x2"+
		"\x2\x2\x23F\x23D\x3\x2\x2\x2\x240+\x3\x2\x2\x2\x241\x243\x5.\x18\x2\x242"+
		"\x241\x3\x2\x2\x2\x243\x246\x3\x2\x2\x2\x244\x242\x3\x2\x2\x2\x244\x245"+
		"\x3\x2\x2\x2\x245\x248\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2\x247\x249\x5"+
		"\x6\x4\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3\x2"+
		"\x2\x2\x24A\x24B\a\x44\x2\x2\x24B\x258\x5\x1A\xE\x2\x24C\x24E\x5.\x18"+
		"\x2\x24D\x24C\x3\x2\x2\x2\x24E\x251\x3\x2\x2\x2\x24F\x24D\x3\x2\x2\x2"+
		"\x24F\x250\x3\x2\x2\x2\x250\x252\x3\x2\x2\x2\x251\x24F\x3\x2\x2\x2\x252"+
		"\x255\a\x12\x2\x2\x253\x254\a\x44\x2\x2\x254\x256\a;\x2\x2\x255\x253\x3"+
		"\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x258\x3\x2\x2\x2\x257\x244\x3\x2"+
		"\x2\x2\x257\x24F\x3\x2\x2\x2\x258-\x3\x2\x2\x2\x259\x25A\a\x1F\x2\x2\x25A"+
		"/\x3\x2\x2\x2\x25B\x25C\a\x44\x2\x2\x25C\x25D\a$\x2\x2\x25D\x25E\aO\x2"+
		"\x2\x25E\x25F\x5\x32\x1A\x2\x25F\x260\aP\x2\x2\x260\x268\x3\x2\x2\x2\x261"+
		"\x262\a\x44\x2\x2\x262\x263\a\x12\x2\x2\x263\x264\aO\x2\x2\x264\x265\x5"+
		"\x32\x1A\x2\x265\x266\aP\x2\x2\x266\x268\x3\x2\x2\x2\x267\x25B\x3\x2\x2"+
		"\x2\x267\x261\x3\x2\x2\x2\x268\x31\x3\x2\x2\x2\x269\x26E\x5<\x1F\x2\x26A"+
		"\x26B\a\x46\x2\x2\x26B\x26D\x5<\x1F\x2\x26C\x26A\x3\x2\x2\x2\x26D\x270"+
		"\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x273\x3"+
		"\x2\x2\x2\x270\x26E\x3\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x269\x3\x2"+
		"\x2\x2\x272\x271\x3\x2\x2\x2\x273\x33\x3\x2\x2\x2\x274\x278\aI\x2\x2\x275"+
		"\x277\x5\x38\x1D\x2\x276\x275\x3\x2\x2\x2\x277\x27A\x3\x2\x2\x2\x278\x276"+
		"\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27B\x3\x2\x2\x2\x27A\x278\x3"+
		"\x2\x2\x2\x27B\x27E\aJ\x2\x2\x27C\x27E\a\x43\x2\x2\x27D\x274\x3\x2\x2"+
		"\x2\x27D\x27C\x3\x2\x2\x2\x27E\x35\x3\x2\x2\x2\x27F\x28A\aQ\x2\x2\x280"+
		"\x28A\aS\x2\x2\x281\x28A\a`\x2\x2\x282\x28A\a^\x2\x2\x283\x28A\a_\x2\x2"+
		"\x284\x28A\aU\x2\x2\x285\x28A\aT\x2\x2\x286\x28A\a\x45\x2\x2\x287\x288"+
		"\aM\x2\x2\x288\x28A\aN\x2\x2\x289\x27F\x3\x2\x2\x2\x289\x280\x3\x2\x2"+
		"\x2\x289\x281\x3\x2\x2\x2\x289\x282\x3\x2\x2\x2\x289\x283\x3\x2\x2\x2"+
		"\x289\x284\x3\x2\x2\x2\x289\x285\x3\x2\x2\x2\x289\x286\x3\x2\x2\x2\x289"+
		"\x287\x3\x2\x2\x2\x28A\x37\x3\x2\x2\x2\x28B\x28C\x5:\x1E\x2\x28C\x28D"+
		"\a\x43\x2\x2\x28D\x2D0\x3\x2\x2\x2\x28E\x28F\a\x39\x2\x2\x28F\x293\aI"+
		"\x2\x2\x290\x292\x5\x38\x1D\x2\x291\x290\x3\x2\x2\x2\x292\x295\x3\x2\x2"+
		"\x2\x293\x291\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294\x296\x3\x2\x2\x2"+
		"\x295\x293\x3\x2\x2\x2\x296\x2D0\aJ\x2\x2\x297\x29B\aI\x2\x2\x298\x29A"+
		"\x5\x38\x1D\x2\x299\x298\x3\x2\x2\x2\x29A\x29D\x3\x2\x2\x2\x29B\x299\x3"+
		"\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29E\x3\x2\x2\x2\x29D\x29B\x3\x2"+
		"\x2\x2\x29E\x2D0\aJ\x2\x2\x29F\x2D0\a\x43\x2\x2\x2A0\x2A1\x5<\x1F\x2\x2A1"+
		"\x2A2\a\x43\x2\x2\x2A2\x2D0\x3\x2\x2\x2\x2A3\x2A4\a\x13\x2\x2\x2A4\x2A5"+
		"\x5<\x1F\x2\x2A5\x2A6\a\x43\x2\x2\x2A6\x2D0\x3\x2\x2\x2\x2A7\x2A8\a\x30"+
		"\x2\x2\x2A8\x2A9\x5<\x1F\x2\x2A9\x2AA\a\x43\x2\x2\x2AA\x2D0\x3\x2\x2\x2"+
		"\x2AB\x2AC\a\x1C\x2\x2\x2AC\x2AD\aO\x2\x2\x2AD\x2AE\x5<\x1F\x2\x2AE\x2AF"+
		"\aP\x2\x2\x2AF\x2B2\x5\x38\x1D\x2\x2B0\x2B1\a\x1D\x2\x2\x2B1\x2B3\x5\x38"+
		"\x1D\x2\x2B2\x2B0\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2D0\x3\x2\x2"+
		"\x2\x2B4\x2B5\a \x2\x2\x2B5\x2B7\aO\x2\x2\x2B6\x2B8\x5:\x1E\x2\x2B7\x2B6"+
		"\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2BB\a\x43"+
		"\x2\x2\x2BA\x2BC\x5<\x1F\x2\x2BB\x2BA\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2"+
		"\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2BF\a\x43\x2\x2\x2BE\x2C0\x5<\x1F\x2\x2BF"+
		"\x2BE\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2"+
		"\aP\x2\x2\x2C2\x2D0\x5\x38\x1D\x2\x2C3\x2C4\a!\x2\x2\x2C4\x2C5\aO\x2\x2"+
		"\x2C5\x2C6\x5:\x1E\x2\x2C6\x2C7\a\"\x2\x2\x2C7\x2C8\x5<\x1F\x2\x2C8\x2C9"+
		"\aP\x2\x2\x2C9\x2CA\x5\x38\x1D\x2\x2CA\x2D0\x3\x2\x2\x2\x2CB\x2CC\a\x10"+
		"\x2\x2\x2CC\x2CD\x5<\x1F\x2\x2CD\x2CE\a\x43\x2\x2\x2CE\x2D0\x3\x2\x2\x2"+
		"\x2CF\x28B\x3\x2\x2\x2\x2CF\x28E\x3\x2\x2\x2\x2CF\x297\x3\x2\x2\x2\x2CF"+
		"\x29F\x3\x2\x2\x2\x2CF\x2A0\x3\x2\x2\x2\x2CF\x2A3\x3\x2\x2\x2\x2CF\x2A7"+
		"\x3\x2\x2\x2\x2CF\x2AB\x3\x2\x2\x2\x2CF\x2B4\x3\x2\x2\x2\x2CF\x2C3\x3"+
		"\x2\x2\x2\x2CF\x2CB\x3\x2\x2\x2\x2D0\x39\x3\x2\x2\x2\x2D1\x2D2\t\x2\x2"+
		"\x2\x2D2\x2D5\x5\x6\x4\x2\x2D3\x2D4\a\x44\x2\x2\x2D4\x2D6\x5\x1A\xE\x2"+
		"\x2D5\x2D3\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7"+
		"\x2D8\a\x64\x2\x2\x2D8\x2DA\x5<\x1F\x2\x2D9\x2D7\x3\x2\x2\x2\x2D9\x2DA"+
		"\x3\x2\x2\x2\x2DA;\x3\x2\x2\x2\x2DB\x2DC\b\x1F\x1\x2\x2DC\x2DD\t\x5\x2"+
		"\x2\x2DD\x2FC\x5<\x1F\x17\x2DE\x2FC\x5\x6\x4\x2\x2DF\x2E0\a\xF\x2\x2\x2E0"+
		"\x2E1\x5\x16\f\x2\x2E1\x2E2\aO\x2\x2\x2E2\x2E3\x5\x32\x1A\x2\x2E3\x2E4"+
		"\aP\x2\x2\x2E4\x2FC\x3\x2\x2\x2\x2E5\x2E7\a\xF\x2\x2\x2E6\x2E8\x5\xE\b"+
		"\x2\x2E7\x2E6\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2"+
		"\x2E9\x2EA\aO\x2\x2\x2EA\x2EB\x5\x32\x1A\x2\x2EB\x2EC\aP\x2\x2\x2EC\x2F0"+
		"\aI\x2\x2\x2ED\x2EF\x5(\x15\x2\x2EE\x2ED\x3\x2\x2\x2\x2EF\x2F2\x3\x2\x2"+
		"\x2\x2F0\x2EE\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F3\x3\x2\x2\x2"+
		"\x2F2\x2F0\x3\x2\x2\x2\x2F3\x2F4\aJ\x2\x2\x2F4\x2FC\x3\x2\x2\x2\x2F5\x2FC"+
		"\a\x41\x2\x2\x2F6\x2FC\a\x12\x2\x2\x2F7\x2FC\a?\x2\x2\x2F8\x2FC\a@\x2"+
		"\x2\x2F9\x2FC\a\x14\x2\x2\x2FA\x2FC\a\x42\x2\x2\x2FB\x2DB\x3\x2\x2\x2"+
		"\x2FB\x2DE\x3\x2\x2\x2\x2FB\x2DF\x3\x2\x2\x2\x2FB\x2E5\x3\x2\x2\x2\x2FB"+
		"\x2F5\x3\x2\x2\x2\x2FB\x2F6\x3\x2\x2\x2\x2FB\x2F7\x3\x2\x2\x2\x2FB\x2F8"+
		"\x3\x2\x2\x2\x2FB\x2F9\x3\x2\x2\x2\x2FB\x2FA\x3\x2\x2\x2\x2FC\x33A\x3"+
		"\x2\x2\x2\x2FD\x2FE\f\x16\x2\x2\x2FE\x2FF\t\x6\x2\x2\x2FF\x339\x5<\x1F"+
		"\x17\x300\x301\f\x15\x2\x2\x301\x302\t\a\x2\x2\x302\x339\x5<\x1F\x16\x303"+
		"\x308\f\x14\x2\x2\x304\x305\aK\x2\x2\x305\x309\aK\x2\x2\x306\x307\aL\x2"+
		"\x2\x307\x309\aL\x2\x2\x308\x304\x3\x2\x2\x2\x308\x306\x3\x2\x2\x2\x309"+
		"\x30A\x3\x2\x2\x2\x30A\x339\x5<\x1F\x15\x30B\x30C\f\x13\x2\x2\x30C\x30D"+
		"\t\x3\x2\x2\x30D\x339\x5<\x1F\x14\x30E\x30F\f\x12\x2\x2\x30F\x310\t\b"+
		"\x2\x2\x310\x339\x5<\x1F\x13\x311\x312\f\x11\x2\x2\x312\x313\a^\x2\x2"+
		"\x313\x339\x5<\x1F\x12\x314\x315\f\x10\x2\x2\x315\x316\a_\x2\x2\x316\x339"+
		"\x5<\x1F\x11\x317\x318\f\xF\x2\x2\x318\x319\a`\x2\x2\x319\x339\x5<\x1F"+
		"\x10\x31A\x31B\f\xE\x2\x2\x31B\x31C\aT\x2\x2\x31C\x339\x5<\x1F\xF\x31D"+
		"\x31E\f\r\x2\x2\x31E\x31F\aU\x2\x2\x31F\x320\x5<\x1F\x2\x320\x321\a\x44"+
		"\x2\x2\x321\x322\x5<\x1F\r\x322\x339\x3\x2\x2\x2\x323\x324\f\f\x2\x2\x324"+
		"\x325\t\t\x2\x2\x325\x339\x5<\x1F\f\x326\x327\f\x1C\x2\x2\x327\x328\a"+
		"\x45\x2\x2\x328\x339\x5\x6\x4\x2\x329\x32A\f\x1B\x2\x2\x32A\x32B\aG\x2"+
		"\x2\x32B\x339\x5\x6\x4\x2\x32C\x32D\f\x1A\x2\x2\x32D\x32E\aO\x2\x2\x32E"+
		"\x32F\x5\x32\x1A\x2\x32F\x330\aP\x2\x2\x330\x339\x3\x2\x2\x2\x331\x332"+
		"\f\x19\x2\x2\x332\x333\aM\x2\x2\x333\x334\x5\x32\x1A\x2\x334\x335\aN\x2"+
		"\x2\x335\x339\x3\x2\x2\x2\x336\x337\f\x18\x2\x2\x337\x339\aU\x2\x2\x338"+
		"\x2FD\x3\x2\x2\x2\x338\x300\x3\x2\x2\x2\x338\x303\x3\x2\x2\x2\x338\x30B"+
		"\x3\x2\x2\x2\x338\x30E\x3\x2\x2\x2\x338\x311\x3\x2\x2\x2\x338\x314\x3"+
		"\x2\x2\x2\x338\x317\x3\x2\x2\x2\x338\x31A\x3\x2\x2\x2\x338\x31D\x3\x2"+
		"\x2\x2\x338\x323\x3\x2\x2\x2\x338\x326\x3\x2\x2\x2\x338\x329\x3\x2\x2"+
		"\x2\x338\x32C\x3\x2\x2\x2\x338\x331\x3\x2\x2\x2\x338\x336\x3\x2\x2\x2"+
		"\x339\x33C\x3\x2\x2\x2\x33A\x338\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B"+
		"=\x3\x2\x2\x2\x33C\x33A\x3\x2\x2\x2j\x41GSZ\x63iqw}\x80\x85\x8C\x94\x9A"+
		"\xA1\xA5\xAC\xB2\xB7\xBF\xC4\xC9\xCD\xD5\xD8\xE8\xF0\xF7\xFB\x100\x106"+
		"\x10A\x113\x119\x11E\x123\x128\x12B\x136\x141\x14B\x14F\x151\x15A\x161"+
		"\x166\x16E\x178\x180\x187\x18C\x192\x197\x19C\x19F\x1A6\x1AC\x1B6\x1BC"+
		"\x1C1\x1C9\x1D1\x1D7\x1E4\x1EA\x1F1\x1F5\x1FC\x202\x208\x210\x218\x21E"+
		"\x223\x22B\x230\x238\x23F\x244\x248\x24F\x255\x257\x267\x26E\x272\x278"+
		"\x27D\x289\x293\x29B\x2B2\x2B7\x2BB\x2BF\x2CF\x2D5\x2D9\x2E7\x2F0\x2FB"+
		"\x308\x338\x33A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Adamant.Exploratory.Compiler.Antlr
